
printf-UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002580  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  0800268c  0800268c  0001268c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002760  08002760  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002760  08002760  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002760  08002760  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002760  08002760  00012760  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002764  08002764  00012764  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002768  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  20000070  080027d8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e0  080027d8  000200e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a9a3  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a39  00000000  00000000  0002aa3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000678  00000000  00000000  0002c478  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000005c0  00000000  00000000  0002caf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000151f1  00000000  00000000  0002d0b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000065b3  00000000  00000000  000422a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006bf37  00000000  00000000  00048854  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b478b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001fc4  00000000  00000000  000b4808  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002674 	.word	0x08002674

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002674 	.word	0x08002674

0800014c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	4b08      	ldr	r3, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	4a07      	ldr	r2, [pc, #28]	; (8000174 <HAL_Init+0x28>)
 8000156:	f043 0310 	orr.w	r3, r3, #16
 800015a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015c:	2003      	movs	r0, #3
 800015e:	f000 f929 	bl	80003b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000162:	2000      	movs	r0, #0
 8000164:	f000 f808 	bl	8000178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000168:	f001 f9cc 	bl	8001504 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800016c:	2300      	movs	r3, #0
}
 800016e:	4618      	mov	r0, r3
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	40022000 	.word	0x40022000

08000178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000180:	4b12      	ldr	r3, [pc, #72]	; (80001cc <HAL_InitTick+0x54>)
 8000182:	681a      	ldr	r2, [r3, #0]
 8000184:	4b12      	ldr	r3, [pc, #72]	; (80001d0 <HAL_InitTick+0x58>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	4619      	mov	r1, r3
 800018a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800018e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000192:	fbb2 f3f3 	udiv	r3, r2, r3
 8000196:	4618      	mov	r0, r3
 8000198:	f000 f933 	bl	8000402 <HAL_SYSTICK_Config>
 800019c:	4603      	mov	r3, r0
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d001      	beq.n	80001a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001a2:	2301      	movs	r3, #1
 80001a4:	e00e      	b.n	80001c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2b0f      	cmp	r3, #15
 80001aa:	d80a      	bhi.n	80001c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ac:	2200      	movs	r2, #0
 80001ae:	6879      	ldr	r1, [r7, #4]
 80001b0:	f04f 30ff 	mov.w	r0, #4294967295
 80001b4:	f000 f909 	bl	80003ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001b8:	4a06      	ldr	r2, [pc, #24]	; (80001d4 <HAL_InitTick+0x5c>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80001be:	2300      	movs	r3, #0
 80001c0:	e000      	b.n	80001c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80001c2:	2301      	movs	r3, #1
}
 80001c4:	4618      	mov	r0, r3
 80001c6:	3708      	adds	r7, #8
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	20000008 	.word	0x20000008
 80001d0:	20000004 	.word	0x20000004
 80001d4:	20000000 	.word	0x20000000

080001d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <HAL_IncTick+0x1c>)
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	461a      	mov	r2, r3
 80001e2:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <HAL_IncTick+0x20>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4413      	add	r3, r2
 80001e8:	4a03      	ldr	r2, [pc, #12]	; (80001f8 <HAL_IncTick+0x20>)
 80001ea:	6013      	str	r3, [r2, #0]
}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr
 80001f4:	20000004 	.word	0x20000004
 80001f8:	20000098 	.word	0x20000098

080001fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000200:	4b02      	ldr	r3, [pc, #8]	; (800020c <HAL_GetTick+0x10>)
 8000202:	681b      	ldr	r3, [r3, #0]
}
 8000204:	4618      	mov	r0, r3
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	20000098 	.word	0x20000098

08000210 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b084      	sub	sp, #16
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000218:	f7ff fff0 	bl	80001fc <HAL_GetTick>
 800021c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000222:	68fb      	ldr	r3, [r7, #12]
 8000224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000228:	d005      	beq.n	8000236 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800022a:	4b09      	ldr	r3, [pc, #36]	; (8000250 <HAL_Delay+0x40>)
 800022c:	781b      	ldrb	r3, [r3, #0]
 800022e:	461a      	mov	r2, r3
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	4413      	add	r3, r2
 8000234:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000236:	bf00      	nop
 8000238:	f7ff ffe0 	bl	80001fc <HAL_GetTick>
 800023c:	4602      	mov	r2, r0
 800023e:	68bb      	ldr	r3, [r7, #8]
 8000240:	1ad3      	subs	r3, r2, r3
 8000242:	68fa      	ldr	r2, [r7, #12]
 8000244:	429a      	cmp	r2, r3
 8000246:	d8f7      	bhi.n	8000238 <HAL_Delay+0x28>
  {
  }
}
 8000248:	bf00      	nop
 800024a:	3710      	adds	r7, #16
 800024c:	46bd      	mov	sp, r7
 800024e:	bd80      	pop	{r7, pc}
 8000250:	20000004 	.word	0x20000004

08000254 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000254:	b480      	push	{r7}
 8000256:	b085      	sub	sp, #20
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	f003 0307 	and.w	r3, r3, #7
 8000262:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000264:	4b0c      	ldr	r3, [pc, #48]	; (8000298 <NVIC_SetPriorityGrouping+0x44>)
 8000266:	68db      	ldr	r3, [r3, #12]
 8000268:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800026a:	68ba      	ldr	r2, [r7, #8]
 800026c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000270:	4013      	ands	r3, r2
 8000272:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000274:	68fb      	ldr	r3, [r7, #12]
 8000276:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000278:	68bb      	ldr	r3, [r7, #8]
 800027a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800027c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000280:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000284:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000286:	4a04      	ldr	r2, [pc, #16]	; (8000298 <NVIC_SetPriorityGrouping+0x44>)
 8000288:	68bb      	ldr	r3, [r7, #8]
 800028a:	60d3      	str	r3, [r2, #12]
}
 800028c:	bf00      	nop
 800028e:	3714      	adds	r7, #20
 8000290:	46bd      	mov	sp, r7
 8000292:	bc80      	pop	{r7}
 8000294:	4770      	bx	lr
 8000296:	bf00      	nop
 8000298:	e000ed00 	.word	0xe000ed00

0800029c <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 800029c:	b480      	push	{r7}
 800029e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <NVIC_GetPriorityGrouping+0x18>)
 80002a2:	68db      	ldr	r3, [r3, #12]
 80002a4:	0a1b      	lsrs	r3, r3, #8
 80002a6:	f003 0307 	and.w	r3, r3, #7
}
 80002aa:	4618      	mov	r0, r3
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bc80      	pop	{r7}
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	e000ed00 	.word	0xe000ed00

080002b8 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002b8:	b480      	push	{r7}
 80002ba:	b083      	sub	sp, #12
 80002bc:	af00      	add	r7, sp, #0
 80002be:	4603      	mov	r3, r0
 80002c0:	6039      	str	r1, [r7, #0]
 80002c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80002c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	da0b      	bge.n	80002e4 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002cc:	683b      	ldr	r3, [r7, #0]
 80002ce:	b2da      	uxtb	r2, r3
 80002d0:	490c      	ldr	r1, [pc, #48]	; (8000304 <NVIC_SetPriority+0x4c>)
 80002d2:	79fb      	ldrb	r3, [r7, #7]
 80002d4:	f003 030f 	and.w	r3, r3, #15
 80002d8:	3b04      	subs	r3, #4
 80002da:	0112      	lsls	r2, r2, #4
 80002dc:	b2d2      	uxtb	r2, r2
 80002de:	440b      	add	r3, r1
 80002e0:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002e2:	e009      	b.n	80002f8 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002e4:	683b      	ldr	r3, [r7, #0]
 80002e6:	b2da      	uxtb	r2, r3
 80002e8:	4907      	ldr	r1, [pc, #28]	; (8000308 <NVIC_SetPriority+0x50>)
 80002ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ee:	0112      	lsls	r2, r2, #4
 80002f0:	b2d2      	uxtb	r2, r2
 80002f2:	440b      	add	r3, r1
 80002f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80002f8:	bf00      	nop
 80002fa:	370c      	adds	r7, #12
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bc80      	pop	{r7}
 8000300:	4770      	bx	lr
 8000302:	bf00      	nop
 8000304:	e000ed00 	.word	0xe000ed00
 8000308:	e000e100 	.word	0xe000e100

0800030c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800030c:	b480      	push	{r7}
 800030e:	b089      	sub	sp, #36	; 0x24
 8000310:	af00      	add	r7, sp, #0
 8000312:	60f8      	str	r0, [r7, #12]
 8000314:	60b9      	str	r1, [r7, #8]
 8000316:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000318:	68fb      	ldr	r3, [r7, #12]
 800031a:	f003 0307 	and.w	r3, r3, #7
 800031e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000320:	69fb      	ldr	r3, [r7, #28]
 8000322:	f1c3 0307 	rsb	r3, r3, #7
 8000326:	2b04      	cmp	r3, #4
 8000328:	bf28      	it	cs
 800032a:	2304      	movcs	r3, #4
 800032c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800032e:	69fb      	ldr	r3, [r7, #28]
 8000330:	3304      	adds	r3, #4
 8000332:	2b06      	cmp	r3, #6
 8000334:	d902      	bls.n	800033c <NVIC_EncodePriority+0x30>
 8000336:	69fb      	ldr	r3, [r7, #28]
 8000338:	3b03      	subs	r3, #3
 800033a:	e000      	b.n	800033e <NVIC_EncodePriority+0x32>
 800033c:	2300      	movs	r3, #0
 800033e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000340:	f04f 32ff 	mov.w	r2, #4294967295
 8000344:	69bb      	ldr	r3, [r7, #24]
 8000346:	fa02 f303 	lsl.w	r3, r2, r3
 800034a:	43da      	mvns	r2, r3
 800034c:	68bb      	ldr	r3, [r7, #8]
 800034e:	401a      	ands	r2, r3
 8000350:	697b      	ldr	r3, [r7, #20]
 8000352:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000354:	f04f 31ff 	mov.w	r1, #4294967295
 8000358:	697b      	ldr	r3, [r7, #20]
 800035a:	fa01 f303 	lsl.w	r3, r1, r3
 800035e:	43d9      	mvns	r1, r3
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000364:	4313      	orrs	r3, r2
         );
}
 8000366:	4618      	mov	r0, r3
 8000368:	3724      	adds	r7, #36	; 0x24
 800036a:	46bd      	mov	sp, r7
 800036c:	bc80      	pop	{r7}
 800036e:	4770      	bx	lr

08000370 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b082      	sub	sp, #8
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	3b01      	subs	r3, #1
 800037c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000380:	d301      	bcc.n	8000386 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000382:	2301      	movs	r3, #1
 8000384:	e00f      	b.n	80003a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000386:	4a0a      	ldr	r2, [pc, #40]	; (80003b0 <SysTick_Config+0x40>)
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	3b01      	subs	r3, #1
 800038c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800038e:	210f      	movs	r1, #15
 8000390:	f04f 30ff 	mov.w	r0, #4294967295
 8000394:	f7ff ff90 	bl	80002b8 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000398:	4b05      	ldr	r3, [pc, #20]	; (80003b0 <SysTick_Config+0x40>)
 800039a:	2200      	movs	r2, #0
 800039c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800039e:	4b04      	ldr	r3, [pc, #16]	; (80003b0 <SysTick_Config+0x40>)
 80003a0:	2207      	movs	r2, #7
 80003a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80003a4:	2300      	movs	r3, #0
}
 80003a6:	4618      	mov	r0, r3
 80003a8:	3708      	adds	r7, #8
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bd80      	pop	{r7, pc}
 80003ae:	bf00      	nop
 80003b0:	e000e010 	.word	0xe000e010

080003b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b082      	sub	sp, #8
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80003bc:	6878      	ldr	r0, [r7, #4]
 80003be:	f7ff ff49 	bl	8000254 <NVIC_SetPriorityGrouping>
}
 80003c2:	bf00      	nop
 80003c4:	3708      	adds	r7, #8
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bd80      	pop	{r7, pc}

080003ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80003ca:	b580      	push	{r7, lr}
 80003cc:	b086      	sub	sp, #24
 80003ce:	af00      	add	r7, sp, #0
 80003d0:	4603      	mov	r3, r0
 80003d2:	60b9      	str	r1, [r7, #8]
 80003d4:	607a      	str	r2, [r7, #4]
 80003d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80003d8:	2300      	movs	r3, #0
 80003da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80003dc:	f7ff ff5e 	bl	800029c <NVIC_GetPriorityGrouping>
 80003e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80003e2:	687a      	ldr	r2, [r7, #4]
 80003e4:	68b9      	ldr	r1, [r7, #8]
 80003e6:	6978      	ldr	r0, [r7, #20]
 80003e8:	f7ff ff90 	bl	800030c <NVIC_EncodePriority>
 80003ec:	4602      	mov	r2, r0
 80003ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80003f2:	4611      	mov	r1, r2
 80003f4:	4618      	mov	r0, r3
 80003f6:	f7ff ff5f 	bl	80002b8 <NVIC_SetPriority>
}
 80003fa:	bf00      	nop
 80003fc:	3718      	adds	r7, #24
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}

08000402 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000402:	b580      	push	{r7, lr}
 8000404:	b082      	sub	sp, #8
 8000406:	af00      	add	r7, sp, #0
 8000408:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800040a:	6878      	ldr	r0, [r7, #4]
 800040c:	f7ff ffb0 	bl	8000370 <SysTick_Config>
 8000410:	4603      	mov	r3, r0
}
 8000412:	4618      	mov	r0, r3
 8000414:	3708      	adds	r7, #8
 8000416:	46bd      	mov	sp, r7
 8000418:	bd80      	pop	{r7, pc}
	...

0800041c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800041c:	b480      	push	{r7}
 800041e:	b08b      	sub	sp, #44	; 0x2c
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
 8000424:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000426:	2300      	movs	r3, #0
 8000428:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 800042a:	2300      	movs	r3, #0
 800042c:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 800042e:	2300      	movs	r3, #0
 8000430:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 8000432:	2300      	movs	r3, #0
 8000434:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 8000436:	2300      	movs	r3, #0
 8000438:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 800043a:	2300      	movs	r3, #0
 800043c:	627b      	str	r3, [r7, #36]	; 0x24
 800043e:	e127      	b.n	8000690 <HAL_GPIO_Init+0x274>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 8000440:	2201      	movs	r2, #1
 8000442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000444:	fa02 f303 	lsl.w	r3, r2, r3
 8000448:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800044a:	683b      	ldr	r3, [r7, #0]
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	69fa      	ldr	r2, [r7, #28]
 8000450:	4013      	ands	r3, r2
 8000452:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000454:	69ba      	ldr	r2, [r7, #24]
 8000456:	69fb      	ldr	r3, [r7, #28]
 8000458:	429a      	cmp	r2, r3
 800045a:	f040 8116 	bne.w	800068a <HAL_GPIO_Init+0x26e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800045e:	683b      	ldr	r3, [r7, #0]
 8000460:	685b      	ldr	r3, [r3, #4]
 8000462:	2b12      	cmp	r3, #18
 8000464:	d034      	beq.n	80004d0 <HAL_GPIO_Init+0xb4>
 8000466:	2b12      	cmp	r3, #18
 8000468:	d80d      	bhi.n	8000486 <HAL_GPIO_Init+0x6a>
 800046a:	2b02      	cmp	r3, #2
 800046c:	d02b      	beq.n	80004c6 <HAL_GPIO_Init+0xaa>
 800046e:	2b02      	cmp	r3, #2
 8000470:	d804      	bhi.n	800047c <HAL_GPIO_Init+0x60>
 8000472:	2b00      	cmp	r3, #0
 8000474:	d031      	beq.n	80004da <HAL_GPIO_Init+0xbe>
 8000476:	2b01      	cmp	r3, #1
 8000478:	d01c      	beq.n	80004b4 <HAL_GPIO_Init+0x98>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800047a:	e048      	b.n	800050e <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 800047c:	2b03      	cmp	r3, #3
 800047e:	d043      	beq.n	8000508 <HAL_GPIO_Init+0xec>
 8000480:	2b11      	cmp	r3, #17
 8000482:	d01b      	beq.n	80004bc <HAL_GPIO_Init+0xa0>
          break;
 8000484:	e043      	b.n	800050e <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000486:	4a87      	ldr	r2, [pc, #540]	; (80006a4 <HAL_GPIO_Init+0x288>)
 8000488:	4293      	cmp	r3, r2
 800048a:	d026      	beq.n	80004da <HAL_GPIO_Init+0xbe>
 800048c:	4a85      	ldr	r2, [pc, #532]	; (80006a4 <HAL_GPIO_Init+0x288>)
 800048e:	4293      	cmp	r3, r2
 8000490:	d806      	bhi.n	80004a0 <HAL_GPIO_Init+0x84>
 8000492:	4a85      	ldr	r2, [pc, #532]	; (80006a8 <HAL_GPIO_Init+0x28c>)
 8000494:	4293      	cmp	r3, r2
 8000496:	d020      	beq.n	80004da <HAL_GPIO_Init+0xbe>
 8000498:	4a84      	ldr	r2, [pc, #528]	; (80006ac <HAL_GPIO_Init+0x290>)
 800049a:	4293      	cmp	r3, r2
 800049c:	d01d      	beq.n	80004da <HAL_GPIO_Init+0xbe>
          break;
 800049e:	e036      	b.n	800050e <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 80004a0:	4a83      	ldr	r2, [pc, #524]	; (80006b0 <HAL_GPIO_Init+0x294>)
 80004a2:	4293      	cmp	r3, r2
 80004a4:	d019      	beq.n	80004da <HAL_GPIO_Init+0xbe>
 80004a6:	4a83      	ldr	r2, [pc, #524]	; (80006b4 <HAL_GPIO_Init+0x298>)
 80004a8:	4293      	cmp	r3, r2
 80004aa:	d016      	beq.n	80004da <HAL_GPIO_Init+0xbe>
 80004ac:	4a82      	ldr	r2, [pc, #520]	; (80006b8 <HAL_GPIO_Init+0x29c>)
 80004ae:	4293      	cmp	r3, r2
 80004b0:	d013      	beq.n	80004da <HAL_GPIO_Init+0xbe>
          break;
 80004b2:	e02c      	b.n	800050e <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80004b4:	683b      	ldr	r3, [r7, #0]
 80004b6:	68db      	ldr	r3, [r3, #12]
 80004b8:	623b      	str	r3, [r7, #32]
          break;
 80004ba:	e028      	b.n	800050e <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80004bc:	683b      	ldr	r3, [r7, #0]
 80004be:	68db      	ldr	r3, [r3, #12]
 80004c0:	3304      	adds	r3, #4
 80004c2:	623b      	str	r3, [r7, #32]
          break;
 80004c4:	e023      	b.n	800050e <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80004c6:	683b      	ldr	r3, [r7, #0]
 80004c8:	68db      	ldr	r3, [r3, #12]
 80004ca:	3308      	adds	r3, #8
 80004cc:	623b      	str	r3, [r7, #32]
          break;
 80004ce:	e01e      	b.n	800050e <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80004d0:	683b      	ldr	r3, [r7, #0]
 80004d2:	68db      	ldr	r3, [r3, #12]
 80004d4:	330c      	adds	r3, #12
 80004d6:	623b      	str	r3, [r7, #32]
          break;
 80004d8:	e019      	b.n	800050e <HAL_GPIO_Init+0xf2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80004da:	683b      	ldr	r3, [r7, #0]
 80004dc:	689b      	ldr	r3, [r3, #8]
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d102      	bne.n	80004e8 <HAL_GPIO_Init+0xcc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80004e2:	2304      	movs	r3, #4
 80004e4:	623b      	str	r3, [r7, #32]
          break;
 80004e6:	e012      	b.n	800050e <HAL_GPIO_Init+0xf2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80004e8:	683b      	ldr	r3, [r7, #0]
 80004ea:	689b      	ldr	r3, [r3, #8]
 80004ec:	2b01      	cmp	r3, #1
 80004ee:	d105      	bne.n	80004fc <HAL_GPIO_Init+0xe0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80004f0:	2308      	movs	r3, #8
 80004f2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	69fa      	ldr	r2, [r7, #28]
 80004f8:	611a      	str	r2, [r3, #16]
          break;
 80004fa:	e008      	b.n	800050e <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80004fc:	2308      	movs	r3, #8
 80004fe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	69fa      	ldr	r2, [r7, #28]
 8000504:	615a      	str	r2, [r3, #20]
          break;
 8000506:	e002      	b.n	800050e <HAL_GPIO_Init+0xf2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000508:	2300      	movs	r3, #0
 800050a:	623b      	str	r3, [r7, #32]
          break;
 800050c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800050e:	69bb      	ldr	r3, [r7, #24]
 8000510:	2bff      	cmp	r3, #255	; 0xff
 8000512:	d801      	bhi.n	8000518 <HAL_GPIO_Init+0xfc>
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	e001      	b.n	800051c <HAL_GPIO_Init+0x100>
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	3304      	adds	r3, #4
 800051c:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 800051e:	69bb      	ldr	r3, [r7, #24]
 8000520:	2bff      	cmp	r3, #255	; 0xff
 8000522:	d802      	bhi.n	800052a <HAL_GPIO_Init+0x10e>
 8000524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000526:	009b      	lsls	r3, r3, #2
 8000528:	e002      	b.n	8000530 <HAL_GPIO_Init+0x114>
 800052a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800052c:	3b08      	subs	r3, #8
 800052e:	009b      	lsls	r3, r3, #2
 8000530:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000532:	68fb      	ldr	r3, [r7, #12]
 8000534:	681a      	ldr	r2, [r3, #0]
 8000536:	210f      	movs	r1, #15
 8000538:	693b      	ldr	r3, [r7, #16]
 800053a:	fa01 f303 	lsl.w	r3, r1, r3
 800053e:	43db      	mvns	r3, r3
 8000540:	401a      	ands	r2, r3
 8000542:	6a39      	ldr	r1, [r7, #32]
 8000544:	693b      	ldr	r3, [r7, #16]
 8000546:	fa01 f303 	lsl.w	r3, r1, r3
 800054a:	431a      	orrs	r2, r3
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000550:	683b      	ldr	r3, [r7, #0]
 8000552:	685b      	ldr	r3, [r3, #4]
 8000554:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000558:	2b00      	cmp	r3, #0
 800055a:	f000 8096 	beq.w	800068a <HAL_GPIO_Init+0x26e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800055e:	4b57      	ldr	r3, [pc, #348]	; (80006bc <HAL_GPIO_Init+0x2a0>)
 8000560:	699b      	ldr	r3, [r3, #24]
 8000562:	4a56      	ldr	r2, [pc, #344]	; (80006bc <HAL_GPIO_Init+0x2a0>)
 8000564:	f043 0301 	orr.w	r3, r3, #1
 8000568:	6193      	str	r3, [r2, #24]
 800056a:	4b54      	ldr	r3, [pc, #336]	; (80006bc <HAL_GPIO_Init+0x2a0>)
 800056c:	699b      	ldr	r3, [r3, #24]
 800056e:	f003 0301 	and.w	r3, r3, #1
 8000572:	60bb      	str	r3, [r7, #8]
 8000574:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 8000576:	4a52      	ldr	r2, [pc, #328]	; (80006c0 <HAL_GPIO_Init+0x2a4>)
 8000578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800057a:	089b      	lsrs	r3, r3, #2
 800057c:	3302      	adds	r3, #2
 800057e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000582:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000586:	f003 0303 	and.w	r3, r3, #3
 800058a:	009b      	lsls	r3, r3, #2
 800058c:	220f      	movs	r2, #15
 800058e:	fa02 f303 	lsl.w	r3, r2, r3
 8000592:	43db      	mvns	r3, r3
 8000594:	697a      	ldr	r2, [r7, #20]
 8000596:	4013      	ands	r3, r2
 8000598:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	4a49      	ldr	r2, [pc, #292]	; (80006c4 <HAL_GPIO_Init+0x2a8>)
 800059e:	4293      	cmp	r3, r2
 80005a0:	d013      	beq.n	80005ca <HAL_GPIO_Init+0x1ae>
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	4a48      	ldr	r2, [pc, #288]	; (80006c8 <HAL_GPIO_Init+0x2ac>)
 80005a6:	4293      	cmp	r3, r2
 80005a8:	d00d      	beq.n	80005c6 <HAL_GPIO_Init+0x1aa>
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	4a47      	ldr	r2, [pc, #284]	; (80006cc <HAL_GPIO_Init+0x2b0>)
 80005ae:	4293      	cmp	r3, r2
 80005b0:	d007      	beq.n	80005c2 <HAL_GPIO_Init+0x1a6>
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	4a46      	ldr	r2, [pc, #280]	; (80006d0 <HAL_GPIO_Init+0x2b4>)
 80005b6:	4293      	cmp	r3, r2
 80005b8:	d101      	bne.n	80005be <HAL_GPIO_Init+0x1a2>
 80005ba:	2303      	movs	r3, #3
 80005bc:	e006      	b.n	80005cc <HAL_GPIO_Init+0x1b0>
 80005be:	2304      	movs	r3, #4
 80005c0:	e004      	b.n	80005cc <HAL_GPIO_Init+0x1b0>
 80005c2:	2302      	movs	r3, #2
 80005c4:	e002      	b.n	80005cc <HAL_GPIO_Init+0x1b0>
 80005c6:	2301      	movs	r3, #1
 80005c8:	e000      	b.n	80005cc <HAL_GPIO_Init+0x1b0>
 80005ca:	2300      	movs	r3, #0
 80005cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80005ce:	f002 0203 	and.w	r2, r2, #3
 80005d2:	0092      	lsls	r2, r2, #2
 80005d4:	4093      	lsls	r3, r2
 80005d6:	697a      	ldr	r2, [r7, #20]
 80005d8:	4313      	orrs	r3, r2
 80005da:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 80005dc:	4938      	ldr	r1, [pc, #224]	; (80006c0 <HAL_GPIO_Init+0x2a4>)
 80005de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005e0:	089b      	lsrs	r3, r3, #2
 80005e2:	3302      	adds	r3, #2
 80005e4:	697a      	ldr	r2, [r7, #20]
 80005e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80005ea:	683b      	ldr	r3, [r7, #0]
 80005ec:	685b      	ldr	r3, [r3, #4]
 80005ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d006      	beq.n	8000604 <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80005f6:	4b37      	ldr	r3, [pc, #220]	; (80006d4 <HAL_GPIO_Init+0x2b8>)
 80005f8:	681a      	ldr	r2, [r3, #0]
 80005fa:	4936      	ldr	r1, [pc, #216]	; (80006d4 <HAL_GPIO_Init+0x2b8>)
 80005fc:	69bb      	ldr	r3, [r7, #24]
 80005fe:	4313      	orrs	r3, r2
 8000600:	600b      	str	r3, [r1, #0]
 8000602:	e006      	b.n	8000612 <HAL_GPIO_Init+0x1f6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000604:	4b33      	ldr	r3, [pc, #204]	; (80006d4 <HAL_GPIO_Init+0x2b8>)
 8000606:	681a      	ldr	r2, [r3, #0]
 8000608:	69bb      	ldr	r3, [r7, #24]
 800060a:	43db      	mvns	r3, r3
 800060c:	4931      	ldr	r1, [pc, #196]	; (80006d4 <HAL_GPIO_Init+0x2b8>)
 800060e:	4013      	ands	r3, r2
 8000610:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000612:	683b      	ldr	r3, [r7, #0]
 8000614:	685b      	ldr	r3, [r3, #4]
 8000616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800061a:	2b00      	cmp	r3, #0
 800061c:	d006      	beq.n	800062c <HAL_GPIO_Init+0x210>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800061e:	4b2d      	ldr	r3, [pc, #180]	; (80006d4 <HAL_GPIO_Init+0x2b8>)
 8000620:	685a      	ldr	r2, [r3, #4]
 8000622:	492c      	ldr	r1, [pc, #176]	; (80006d4 <HAL_GPIO_Init+0x2b8>)
 8000624:	69bb      	ldr	r3, [r7, #24]
 8000626:	4313      	orrs	r3, r2
 8000628:	604b      	str	r3, [r1, #4]
 800062a:	e006      	b.n	800063a <HAL_GPIO_Init+0x21e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800062c:	4b29      	ldr	r3, [pc, #164]	; (80006d4 <HAL_GPIO_Init+0x2b8>)
 800062e:	685a      	ldr	r2, [r3, #4]
 8000630:	69bb      	ldr	r3, [r7, #24]
 8000632:	43db      	mvns	r3, r3
 8000634:	4927      	ldr	r1, [pc, #156]	; (80006d4 <HAL_GPIO_Init+0x2b8>)
 8000636:	4013      	ands	r3, r2
 8000638:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800063a:	683b      	ldr	r3, [r7, #0]
 800063c:	685b      	ldr	r3, [r3, #4]
 800063e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000642:	2b00      	cmp	r3, #0
 8000644:	d006      	beq.n	8000654 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000646:	4b23      	ldr	r3, [pc, #140]	; (80006d4 <HAL_GPIO_Init+0x2b8>)
 8000648:	689a      	ldr	r2, [r3, #8]
 800064a:	4922      	ldr	r1, [pc, #136]	; (80006d4 <HAL_GPIO_Init+0x2b8>)
 800064c:	69bb      	ldr	r3, [r7, #24]
 800064e:	4313      	orrs	r3, r2
 8000650:	608b      	str	r3, [r1, #8]
 8000652:	e006      	b.n	8000662 <HAL_GPIO_Init+0x246>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000654:	4b1f      	ldr	r3, [pc, #124]	; (80006d4 <HAL_GPIO_Init+0x2b8>)
 8000656:	689a      	ldr	r2, [r3, #8]
 8000658:	69bb      	ldr	r3, [r7, #24]
 800065a:	43db      	mvns	r3, r3
 800065c:	491d      	ldr	r1, [pc, #116]	; (80006d4 <HAL_GPIO_Init+0x2b8>)
 800065e:	4013      	ands	r3, r2
 8000660:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	685b      	ldr	r3, [r3, #4]
 8000666:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800066a:	2b00      	cmp	r3, #0
 800066c:	d006      	beq.n	800067c <HAL_GPIO_Init+0x260>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800066e:	4b19      	ldr	r3, [pc, #100]	; (80006d4 <HAL_GPIO_Init+0x2b8>)
 8000670:	68da      	ldr	r2, [r3, #12]
 8000672:	4918      	ldr	r1, [pc, #96]	; (80006d4 <HAL_GPIO_Init+0x2b8>)
 8000674:	69bb      	ldr	r3, [r7, #24]
 8000676:	4313      	orrs	r3, r2
 8000678:	60cb      	str	r3, [r1, #12]
 800067a:	e006      	b.n	800068a <HAL_GPIO_Init+0x26e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800067c:	4b15      	ldr	r3, [pc, #84]	; (80006d4 <HAL_GPIO_Init+0x2b8>)
 800067e:	68da      	ldr	r2, [r3, #12]
 8000680:	69bb      	ldr	r3, [r7, #24]
 8000682:	43db      	mvns	r3, r3
 8000684:	4913      	ldr	r1, [pc, #76]	; (80006d4 <HAL_GPIO_Init+0x2b8>)
 8000686:	4013      	ands	r3, r2
 8000688:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 800068a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800068c:	3301      	adds	r3, #1
 800068e:	627b      	str	r3, [r7, #36]	; 0x24
 8000690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000692:	2b0f      	cmp	r3, #15
 8000694:	f67f aed4 	bls.w	8000440 <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 8000698:	bf00      	nop
 800069a:	372c      	adds	r7, #44	; 0x2c
 800069c:	46bd      	mov	sp, r7
 800069e:	bc80      	pop	{r7}
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	10210000 	.word	0x10210000
 80006a8:	10110000 	.word	0x10110000
 80006ac:	10120000 	.word	0x10120000
 80006b0:	10310000 	.word	0x10310000
 80006b4:	10320000 	.word	0x10320000
 80006b8:	10220000 	.word	0x10220000
 80006bc:	40021000 	.word	0x40021000
 80006c0:	40010000 	.word	0x40010000
 80006c4:	40010800 	.word	0x40010800
 80006c8:	40010c00 	.word	0x40010c00
 80006cc:	40011000 	.word	0x40011000
 80006d0:	40011400 	.word	0x40011400
 80006d4:	40010400 	.word	0x40010400

080006d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b086      	sub	sp, #24
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 80006e0:	2300      	movs	r3, #0
 80006e2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	f003 0301 	and.w	r3, r3, #1
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	f000 8087 	beq.w	8000800 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80006f2:	4b92      	ldr	r3, [pc, #584]	; (800093c <HAL_RCC_OscConfig+0x264>)
 80006f4:	685b      	ldr	r3, [r3, #4]
 80006f6:	f003 030c 	and.w	r3, r3, #12
 80006fa:	2b04      	cmp	r3, #4
 80006fc:	d00c      	beq.n	8000718 <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80006fe:	4b8f      	ldr	r3, [pc, #572]	; (800093c <HAL_RCC_OscConfig+0x264>)
 8000700:	685b      	ldr	r3, [r3, #4]
 8000702:	f003 030c 	and.w	r3, r3, #12
 8000706:	2b08      	cmp	r3, #8
 8000708:	d112      	bne.n	8000730 <HAL_RCC_OscConfig+0x58>
 800070a:	4b8c      	ldr	r3, [pc, #560]	; (800093c <HAL_RCC_OscConfig+0x264>)
 800070c:	685b      	ldr	r3, [r3, #4]
 800070e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000712:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000716:	d10b      	bne.n	8000730 <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000718:	4b88      	ldr	r3, [pc, #544]	; (800093c <HAL_RCC_OscConfig+0x264>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000720:	2b00      	cmp	r3, #0
 8000722:	d06c      	beq.n	80007fe <HAL_RCC_OscConfig+0x126>
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	685b      	ldr	r3, [r3, #4]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d168      	bne.n	80007fe <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 800072c:	2301      	movs	r3, #1
 800072e:	e22d      	b.n	8000b8c <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	685b      	ldr	r3, [r3, #4]
 8000734:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000738:	d106      	bne.n	8000748 <HAL_RCC_OscConfig+0x70>
 800073a:	4b80      	ldr	r3, [pc, #512]	; (800093c <HAL_RCC_OscConfig+0x264>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	4a7f      	ldr	r2, [pc, #508]	; (800093c <HAL_RCC_OscConfig+0x264>)
 8000740:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000744:	6013      	str	r3, [r2, #0]
 8000746:	e02e      	b.n	80007a6 <HAL_RCC_OscConfig+0xce>
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	685b      	ldr	r3, [r3, #4]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d10c      	bne.n	800076a <HAL_RCC_OscConfig+0x92>
 8000750:	4b7a      	ldr	r3, [pc, #488]	; (800093c <HAL_RCC_OscConfig+0x264>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	4a79      	ldr	r2, [pc, #484]	; (800093c <HAL_RCC_OscConfig+0x264>)
 8000756:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800075a:	6013      	str	r3, [r2, #0]
 800075c:	4b77      	ldr	r3, [pc, #476]	; (800093c <HAL_RCC_OscConfig+0x264>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	4a76      	ldr	r2, [pc, #472]	; (800093c <HAL_RCC_OscConfig+0x264>)
 8000762:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000766:	6013      	str	r3, [r2, #0]
 8000768:	e01d      	b.n	80007a6 <HAL_RCC_OscConfig+0xce>
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	685b      	ldr	r3, [r3, #4]
 800076e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000772:	d10c      	bne.n	800078e <HAL_RCC_OscConfig+0xb6>
 8000774:	4b71      	ldr	r3, [pc, #452]	; (800093c <HAL_RCC_OscConfig+0x264>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a70      	ldr	r2, [pc, #448]	; (800093c <HAL_RCC_OscConfig+0x264>)
 800077a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800077e:	6013      	str	r3, [r2, #0]
 8000780:	4b6e      	ldr	r3, [pc, #440]	; (800093c <HAL_RCC_OscConfig+0x264>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4a6d      	ldr	r2, [pc, #436]	; (800093c <HAL_RCC_OscConfig+0x264>)
 8000786:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800078a:	6013      	str	r3, [r2, #0]
 800078c:	e00b      	b.n	80007a6 <HAL_RCC_OscConfig+0xce>
 800078e:	4b6b      	ldr	r3, [pc, #428]	; (800093c <HAL_RCC_OscConfig+0x264>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	4a6a      	ldr	r2, [pc, #424]	; (800093c <HAL_RCC_OscConfig+0x264>)
 8000794:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000798:	6013      	str	r3, [r2, #0]
 800079a:	4b68      	ldr	r3, [pc, #416]	; (800093c <HAL_RCC_OscConfig+0x264>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	4a67      	ldr	r2, [pc, #412]	; (800093c <HAL_RCC_OscConfig+0x264>)
 80007a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80007a4:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	685b      	ldr	r3, [r3, #4]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d013      	beq.n	80007d6 <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80007ae:	f7ff fd25 	bl	80001fc <HAL_GetTick>
 80007b2:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80007b4:	e008      	b.n	80007c8 <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80007b6:	f7ff fd21 	bl	80001fc <HAL_GetTick>
 80007ba:	4602      	mov	r2, r0
 80007bc:	693b      	ldr	r3, [r7, #16]
 80007be:	1ad3      	subs	r3, r2, r3
 80007c0:	2b64      	cmp	r3, #100	; 0x64
 80007c2:	d901      	bls.n	80007c8 <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 80007c4:	2303      	movs	r3, #3
 80007c6:	e1e1      	b.n	8000b8c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80007c8:	4b5c      	ldr	r3, [pc, #368]	; (800093c <HAL_RCC_OscConfig+0x264>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d0f0      	beq.n	80007b6 <HAL_RCC_OscConfig+0xde>
 80007d4:	e014      	b.n	8000800 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80007d6:	f7ff fd11 	bl	80001fc <HAL_GetTick>
 80007da:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80007dc:	e008      	b.n	80007f0 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80007de:	f7ff fd0d 	bl	80001fc <HAL_GetTick>
 80007e2:	4602      	mov	r2, r0
 80007e4:	693b      	ldr	r3, [r7, #16]
 80007e6:	1ad3      	subs	r3, r2, r3
 80007e8:	2b64      	cmp	r3, #100	; 0x64
 80007ea:	d901      	bls.n	80007f0 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 80007ec:	2303      	movs	r3, #3
 80007ee:	e1cd      	b.n	8000b8c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80007f0:	4b52      	ldr	r3, [pc, #328]	; (800093c <HAL_RCC_OscConfig+0x264>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d1f0      	bne.n	80007de <HAL_RCC_OscConfig+0x106>
 80007fc:	e000      	b.n	8000800 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80007fe:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	f003 0302 	and.w	r3, r3, #2
 8000808:	2b00      	cmp	r3, #0
 800080a:	d063      	beq.n	80008d4 <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800080c:	4b4b      	ldr	r3, [pc, #300]	; (800093c <HAL_RCC_OscConfig+0x264>)
 800080e:	685b      	ldr	r3, [r3, #4]
 8000810:	f003 030c 	and.w	r3, r3, #12
 8000814:	2b00      	cmp	r3, #0
 8000816:	d00b      	beq.n	8000830 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000818:	4b48      	ldr	r3, [pc, #288]	; (800093c <HAL_RCC_OscConfig+0x264>)
 800081a:	685b      	ldr	r3, [r3, #4]
 800081c:	f003 030c 	and.w	r3, r3, #12
 8000820:	2b08      	cmp	r3, #8
 8000822:	d11c      	bne.n	800085e <HAL_RCC_OscConfig+0x186>
 8000824:	4b45      	ldr	r3, [pc, #276]	; (800093c <HAL_RCC_OscConfig+0x264>)
 8000826:	685b      	ldr	r3, [r3, #4]
 8000828:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800082c:	2b00      	cmp	r3, #0
 800082e:	d116      	bne.n	800085e <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000830:	4b42      	ldr	r3, [pc, #264]	; (800093c <HAL_RCC_OscConfig+0x264>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	f003 0302 	and.w	r3, r3, #2
 8000838:	2b00      	cmp	r3, #0
 800083a:	d005      	beq.n	8000848 <HAL_RCC_OscConfig+0x170>
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	691b      	ldr	r3, [r3, #16]
 8000840:	2b01      	cmp	r3, #1
 8000842:	d001      	beq.n	8000848 <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 8000844:	2301      	movs	r3, #1
 8000846:	e1a1      	b.n	8000b8c <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000848:	4b3c      	ldr	r3, [pc, #240]	; (800093c <HAL_RCC_OscConfig+0x264>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	695b      	ldr	r3, [r3, #20]
 8000854:	00db      	lsls	r3, r3, #3
 8000856:	4939      	ldr	r1, [pc, #228]	; (800093c <HAL_RCC_OscConfig+0x264>)
 8000858:	4313      	orrs	r3, r2
 800085a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800085c:	e03a      	b.n	80008d4 <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	691b      	ldr	r3, [r3, #16]
 8000862:	2b00      	cmp	r3, #0
 8000864:	d020      	beq.n	80008a8 <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000866:	4b36      	ldr	r3, [pc, #216]	; (8000940 <HAL_RCC_OscConfig+0x268>)
 8000868:	2201      	movs	r2, #1
 800086a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800086c:	f7ff fcc6 	bl	80001fc <HAL_GetTick>
 8000870:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000872:	e008      	b.n	8000886 <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000874:	f7ff fcc2 	bl	80001fc <HAL_GetTick>
 8000878:	4602      	mov	r2, r0
 800087a:	693b      	ldr	r3, [r7, #16]
 800087c:	1ad3      	subs	r3, r2, r3
 800087e:	2b02      	cmp	r3, #2
 8000880:	d901      	bls.n	8000886 <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 8000882:	2303      	movs	r3, #3
 8000884:	e182      	b.n	8000b8c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000886:	4b2d      	ldr	r3, [pc, #180]	; (800093c <HAL_RCC_OscConfig+0x264>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	f003 0302 	and.w	r3, r3, #2
 800088e:	2b00      	cmp	r3, #0
 8000890:	d0f0      	beq.n	8000874 <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000892:	4b2a      	ldr	r3, [pc, #168]	; (800093c <HAL_RCC_OscConfig+0x264>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	695b      	ldr	r3, [r3, #20]
 800089e:	00db      	lsls	r3, r3, #3
 80008a0:	4926      	ldr	r1, [pc, #152]	; (800093c <HAL_RCC_OscConfig+0x264>)
 80008a2:	4313      	orrs	r3, r2
 80008a4:	600b      	str	r3, [r1, #0]
 80008a6:	e015      	b.n	80008d4 <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80008a8:	4b25      	ldr	r3, [pc, #148]	; (8000940 <HAL_RCC_OscConfig+0x268>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80008ae:	f7ff fca5 	bl	80001fc <HAL_GetTick>
 80008b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80008b4:	e008      	b.n	80008c8 <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80008b6:	f7ff fca1 	bl	80001fc <HAL_GetTick>
 80008ba:	4602      	mov	r2, r0
 80008bc:	693b      	ldr	r3, [r7, #16]
 80008be:	1ad3      	subs	r3, r2, r3
 80008c0:	2b02      	cmp	r3, #2
 80008c2:	d901      	bls.n	80008c8 <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 80008c4:	2303      	movs	r3, #3
 80008c6:	e161      	b.n	8000b8c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80008c8:	4b1c      	ldr	r3, [pc, #112]	; (800093c <HAL_RCC_OscConfig+0x264>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	f003 0302 	and.w	r3, r3, #2
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d1f0      	bne.n	80008b6 <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	f003 0308 	and.w	r3, r3, #8
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d039      	beq.n	8000954 <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	699b      	ldr	r3, [r3, #24]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d019      	beq.n	800091c <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80008e8:	4b16      	ldr	r3, [pc, #88]	; (8000944 <HAL_RCC_OscConfig+0x26c>)
 80008ea:	2201      	movs	r2, #1
 80008ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80008ee:	f7ff fc85 	bl	80001fc <HAL_GetTick>
 80008f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80008f4:	e008      	b.n	8000908 <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80008f6:	f7ff fc81 	bl	80001fc <HAL_GetTick>
 80008fa:	4602      	mov	r2, r0
 80008fc:	693b      	ldr	r3, [r7, #16]
 80008fe:	1ad3      	subs	r3, r2, r3
 8000900:	2b02      	cmp	r3, #2
 8000902:	d901      	bls.n	8000908 <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 8000904:	2303      	movs	r3, #3
 8000906:	e141      	b.n	8000b8c <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000908:	4b0c      	ldr	r3, [pc, #48]	; (800093c <HAL_RCC_OscConfig+0x264>)
 800090a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800090c:	f003 0302 	and.w	r3, r3, #2
 8000910:	2b00      	cmp	r3, #0
 8000912:	d0f0      	beq.n	80008f6 <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 8000914:	2001      	movs	r0, #1
 8000916:	f000 fae3 	bl	8000ee0 <RCC_Delay>
 800091a:	e01b      	b.n	8000954 <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800091c:	4b09      	ldr	r3, [pc, #36]	; (8000944 <HAL_RCC_OscConfig+0x26c>)
 800091e:	2200      	movs	r2, #0
 8000920:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000922:	f7ff fc6b 	bl	80001fc <HAL_GetTick>
 8000926:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000928:	e00e      	b.n	8000948 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800092a:	f7ff fc67 	bl	80001fc <HAL_GetTick>
 800092e:	4602      	mov	r2, r0
 8000930:	693b      	ldr	r3, [r7, #16]
 8000932:	1ad3      	subs	r3, r2, r3
 8000934:	2b02      	cmp	r3, #2
 8000936:	d907      	bls.n	8000948 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 8000938:	2303      	movs	r3, #3
 800093a:	e127      	b.n	8000b8c <HAL_RCC_OscConfig+0x4b4>
 800093c:	40021000 	.word	0x40021000
 8000940:	42420000 	.word	0x42420000
 8000944:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000948:	4b92      	ldr	r3, [pc, #584]	; (8000b94 <HAL_RCC_OscConfig+0x4bc>)
 800094a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800094c:	f003 0302 	and.w	r3, r3, #2
 8000950:	2b00      	cmp	r3, #0
 8000952:	d1ea      	bne.n	800092a <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	f003 0304 	and.w	r3, r3, #4
 800095c:	2b00      	cmp	r3, #0
 800095e:	f000 80a6 	beq.w	8000aae <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000962:	2300      	movs	r3, #0
 8000964:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000966:	4b8b      	ldr	r3, [pc, #556]	; (8000b94 <HAL_RCC_OscConfig+0x4bc>)
 8000968:	69db      	ldr	r3, [r3, #28]
 800096a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800096e:	2b00      	cmp	r3, #0
 8000970:	d10d      	bne.n	800098e <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000972:	4b88      	ldr	r3, [pc, #544]	; (8000b94 <HAL_RCC_OscConfig+0x4bc>)
 8000974:	69db      	ldr	r3, [r3, #28]
 8000976:	4a87      	ldr	r2, [pc, #540]	; (8000b94 <HAL_RCC_OscConfig+0x4bc>)
 8000978:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800097c:	61d3      	str	r3, [r2, #28]
 800097e:	4b85      	ldr	r3, [pc, #532]	; (8000b94 <HAL_RCC_OscConfig+0x4bc>)
 8000980:	69db      	ldr	r3, [r3, #28]
 8000982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000986:	60fb      	str	r3, [r7, #12]
 8000988:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800098a:	2301      	movs	r3, #1
 800098c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800098e:	4b82      	ldr	r3, [pc, #520]	; (8000b98 <HAL_RCC_OscConfig+0x4c0>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000996:	2b00      	cmp	r3, #0
 8000998:	d118      	bne.n	80009cc <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800099a:	4b7f      	ldr	r3, [pc, #508]	; (8000b98 <HAL_RCC_OscConfig+0x4c0>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	4a7e      	ldr	r2, [pc, #504]	; (8000b98 <HAL_RCC_OscConfig+0x4c0>)
 80009a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80009a6:	f7ff fc29 	bl	80001fc <HAL_GetTick>
 80009aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80009ac:	e008      	b.n	80009c0 <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80009ae:	f7ff fc25 	bl	80001fc <HAL_GetTick>
 80009b2:	4602      	mov	r2, r0
 80009b4:	693b      	ldr	r3, [r7, #16]
 80009b6:	1ad3      	subs	r3, r2, r3
 80009b8:	2b64      	cmp	r3, #100	; 0x64
 80009ba:	d901      	bls.n	80009c0 <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 80009bc:	2303      	movs	r3, #3
 80009be:	e0e5      	b.n	8000b8c <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80009c0:	4b75      	ldr	r3, [pc, #468]	; (8000b98 <HAL_RCC_OscConfig+0x4c0>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d0f0      	beq.n	80009ae <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	68db      	ldr	r3, [r3, #12]
 80009d0:	2b01      	cmp	r3, #1
 80009d2:	d106      	bne.n	80009e2 <HAL_RCC_OscConfig+0x30a>
 80009d4:	4b6f      	ldr	r3, [pc, #444]	; (8000b94 <HAL_RCC_OscConfig+0x4bc>)
 80009d6:	6a1b      	ldr	r3, [r3, #32]
 80009d8:	4a6e      	ldr	r2, [pc, #440]	; (8000b94 <HAL_RCC_OscConfig+0x4bc>)
 80009da:	f043 0301 	orr.w	r3, r3, #1
 80009de:	6213      	str	r3, [r2, #32]
 80009e0:	e02d      	b.n	8000a3e <HAL_RCC_OscConfig+0x366>
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	68db      	ldr	r3, [r3, #12]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d10c      	bne.n	8000a04 <HAL_RCC_OscConfig+0x32c>
 80009ea:	4b6a      	ldr	r3, [pc, #424]	; (8000b94 <HAL_RCC_OscConfig+0x4bc>)
 80009ec:	6a1b      	ldr	r3, [r3, #32]
 80009ee:	4a69      	ldr	r2, [pc, #420]	; (8000b94 <HAL_RCC_OscConfig+0x4bc>)
 80009f0:	f023 0301 	bic.w	r3, r3, #1
 80009f4:	6213      	str	r3, [r2, #32]
 80009f6:	4b67      	ldr	r3, [pc, #412]	; (8000b94 <HAL_RCC_OscConfig+0x4bc>)
 80009f8:	6a1b      	ldr	r3, [r3, #32]
 80009fa:	4a66      	ldr	r2, [pc, #408]	; (8000b94 <HAL_RCC_OscConfig+0x4bc>)
 80009fc:	f023 0304 	bic.w	r3, r3, #4
 8000a00:	6213      	str	r3, [r2, #32]
 8000a02:	e01c      	b.n	8000a3e <HAL_RCC_OscConfig+0x366>
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	68db      	ldr	r3, [r3, #12]
 8000a08:	2b05      	cmp	r3, #5
 8000a0a:	d10c      	bne.n	8000a26 <HAL_RCC_OscConfig+0x34e>
 8000a0c:	4b61      	ldr	r3, [pc, #388]	; (8000b94 <HAL_RCC_OscConfig+0x4bc>)
 8000a0e:	6a1b      	ldr	r3, [r3, #32]
 8000a10:	4a60      	ldr	r2, [pc, #384]	; (8000b94 <HAL_RCC_OscConfig+0x4bc>)
 8000a12:	f043 0304 	orr.w	r3, r3, #4
 8000a16:	6213      	str	r3, [r2, #32]
 8000a18:	4b5e      	ldr	r3, [pc, #376]	; (8000b94 <HAL_RCC_OscConfig+0x4bc>)
 8000a1a:	6a1b      	ldr	r3, [r3, #32]
 8000a1c:	4a5d      	ldr	r2, [pc, #372]	; (8000b94 <HAL_RCC_OscConfig+0x4bc>)
 8000a1e:	f043 0301 	orr.w	r3, r3, #1
 8000a22:	6213      	str	r3, [r2, #32]
 8000a24:	e00b      	b.n	8000a3e <HAL_RCC_OscConfig+0x366>
 8000a26:	4b5b      	ldr	r3, [pc, #364]	; (8000b94 <HAL_RCC_OscConfig+0x4bc>)
 8000a28:	6a1b      	ldr	r3, [r3, #32]
 8000a2a:	4a5a      	ldr	r2, [pc, #360]	; (8000b94 <HAL_RCC_OscConfig+0x4bc>)
 8000a2c:	f023 0301 	bic.w	r3, r3, #1
 8000a30:	6213      	str	r3, [r2, #32]
 8000a32:	4b58      	ldr	r3, [pc, #352]	; (8000b94 <HAL_RCC_OscConfig+0x4bc>)
 8000a34:	6a1b      	ldr	r3, [r3, #32]
 8000a36:	4a57      	ldr	r2, [pc, #348]	; (8000b94 <HAL_RCC_OscConfig+0x4bc>)
 8000a38:	f023 0304 	bic.w	r3, r3, #4
 8000a3c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	68db      	ldr	r3, [r3, #12]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d015      	beq.n	8000a72 <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000a46:	f7ff fbd9 	bl	80001fc <HAL_GetTick>
 8000a4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a4c:	e00a      	b.n	8000a64 <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a4e:	f7ff fbd5 	bl	80001fc <HAL_GetTick>
 8000a52:	4602      	mov	r2, r0
 8000a54:	693b      	ldr	r3, [r7, #16]
 8000a56:	1ad3      	subs	r3, r2, r3
 8000a58:	f241 3288 	movw	r2, #5000	; 0x1388
 8000a5c:	4293      	cmp	r3, r2
 8000a5e:	d901      	bls.n	8000a64 <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 8000a60:	2303      	movs	r3, #3
 8000a62:	e093      	b.n	8000b8c <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a64:	4b4b      	ldr	r3, [pc, #300]	; (8000b94 <HAL_RCC_OscConfig+0x4bc>)
 8000a66:	6a1b      	ldr	r3, [r3, #32]
 8000a68:	f003 0302 	and.w	r3, r3, #2
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d0ee      	beq.n	8000a4e <HAL_RCC_OscConfig+0x376>
 8000a70:	e014      	b.n	8000a9c <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000a72:	f7ff fbc3 	bl	80001fc <HAL_GetTick>
 8000a76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000a78:	e00a      	b.n	8000a90 <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a7a:	f7ff fbbf 	bl	80001fc <HAL_GetTick>
 8000a7e:	4602      	mov	r2, r0
 8000a80:	693b      	ldr	r3, [r7, #16]
 8000a82:	1ad3      	subs	r3, r2, r3
 8000a84:	f241 3288 	movw	r2, #5000	; 0x1388
 8000a88:	4293      	cmp	r3, r2
 8000a8a:	d901      	bls.n	8000a90 <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 8000a8c:	2303      	movs	r3, #3
 8000a8e:	e07d      	b.n	8000b8c <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000a90:	4b40      	ldr	r3, [pc, #256]	; (8000b94 <HAL_RCC_OscConfig+0x4bc>)
 8000a92:	6a1b      	ldr	r3, [r3, #32]
 8000a94:	f003 0302 	and.w	r3, r3, #2
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d1ee      	bne.n	8000a7a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000a9c:	7dfb      	ldrb	r3, [r7, #23]
 8000a9e:	2b01      	cmp	r3, #1
 8000aa0:	d105      	bne.n	8000aae <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000aa2:	4b3c      	ldr	r3, [pc, #240]	; (8000b94 <HAL_RCC_OscConfig+0x4bc>)
 8000aa4:	69db      	ldr	r3, [r3, #28]
 8000aa6:	4a3b      	ldr	r2, [pc, #236]	; (8000b94 <HAL_RCC_OscConfig+0x4bc>)
 8000aa8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000aac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	69db      	ldr	r3, [r3, #28]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d069      	beq.n	8000b8a <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000ab6:	4b37      	ldr	r3, [pc, #220]	; (8000b94 <HAL_RCC_OscConfig+0x4bc>)
 8000ab8:	685b      	ldr	r3, [r3, #4]
 8000aba:	f003 030c 	and.w	r3, r3, #12
 8000abe:	2b08      	cmp	r3, #8
 8000ac0:	d061      	beq.n	8000b86 <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	69db      	ldr	r3, [r3, #28]
 8000ac6:	2b02      	cmp	r3, #2
 8000ac8:	d146      	bne.n	8000b58 <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000aca:	4b34      	ldr	r3, [pc, #208]	; (8000b9c <HAL_RCC_OscConfig+0x4c4>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ad0:	f7ff fb94 	bl	80001fc <HAL_GetTick>
 8000ad4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ad6:	e008      	b.n	8000aea <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ad8:	f7ff fb90 	bl	80001fc <HAL_GetTick>
 8000adc:	4602      	mov	r2, r0
 8000ade:	693b      	ldr	r3, [r7, #16]
 8000ae0:	1ad3      	subs	r3, r2, r3
 8000ae2:	2b02      	cmp	r3, #2
 8000ae4:	d901      	bls.n	8000aea <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8000ae6:	2303      	movs	r3, #3
 8000ae8:	e050      	b.n	8000b8c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000aea:	4b2a      	ldr	r3, [pc, #168]	; (8000b94 <HAL_RCC_OscConfig+0x4bc>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d1f0      	bne.n	8000ad8 <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	6a1b      	ldr	r3, [r3, #32]
 8000afa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000afe:	d108      	bne.n	8000b12 <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000b00:	4b24      	ldr	r3, [pc, #144]	; (8000b94 <HAL_RCC_OscConfig+0x4bc>)
 8000b02:	685b      	ldr	r3, [r3, #4]
 8000b04:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	689b      	ldr	r3, [r3, #8]
 8000b0c:	4921      	ldr	r1, [pc, #132]	; (8000b94 <HAL_RCC_OscConfig+0x4bc>)
 8000b0e:	4313      	orrs	r3, r2
 8000b10:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000b12:	4b20      	ldr	r3, [pc, #128]	; (8000b94 <HAL_RCC_OscConfig+0x4bc>)
 8000b14:	685b      	ldr	r3, [r3, #4]
 8000b16:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	6a19      	ldr	r1, [r3, #32]
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b22:	430b      	orrs	r3, r1
 8000b24:	491b      	ldr	r1, [pc, #108]	; (8000b94 <HAL_RCC_OscConfig+0x4bc>)
 8000b26:	4313      	orrs	r3, r2
 8000b28:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000b2a:	4b1c      	ldr	r3, [pc, #112]	; (8000b9c <HAL_RCC_OscConfig+0x4c4>)
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b30:	f7ff fb64 	bl	80001fc <HAL_GetTick>
 8000b34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000b36:	e008      	b.n	8000b4a <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b38:	f7ff fb60 	bl	80001fc <HAL_GetTick>
 8000b3c:	4602      	mov	r2, r0
 8000b3e:	693b      	ldr	r3, [r7, #16]
 8000b40:	1ad3      	subs	r3, r2, r3
 8000b42:	2b02      	cmp	r3, #2
 8000b44:	d901      	bls.n	8000b4a <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 8000b46:	2303      	movs	r3, #3
 8000b48:	e020      	b.n	8000b8c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000b4a:	4b12      	ldr	r3, [pc, #72]	; (8000b94 <HAL_RCC_OscConfig+0x4bc>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d0f0      	beq.n	8000b38 <HAL_RCC_OscConfig+0x460>
 8000b56:	e018      	b.n	8000b8a <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000b58:	4b10      	ldr	r3, [pc, #64]	; (8000b9c <HAL_RCC_OscConfig+0x4c4>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b5e:	f7ff fb4d 	bl	80001fc <HAL_GetTick>
 8000b62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b64:	e008      	b.n	8000b78 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b66:	f7ff fb49 	bl	80001fc <HAL_GetTick>
 8000b6a:	4602      	mov	r2, r0
 8000b6c:	693b      	ldr	r3, [r7, #16]
 8000b6e:	1ad3      	subs	r3, r2, r3
 8000b70:	2b02      	cmp	r3, #2
 8000b72:	d901      	bls.n	8000b78 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 8000b74:	2303      	movs	r3, #3
 8000b76:	e009      	b.n	8000b8c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b78:	4b06      	ldr	r3, [pc, #24]	; (8000b94 <HAL_RCC_OscConfig+0x4bc>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d1f0      	bne.n	8000b66 <HAL_RCC_OscConfig+0x48e>
 8000b84:	e001      	b.n	8000b8a <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8000b86:	2301      	movs	r3, #1
 8000b88:	e000      	b.n	8000b8c <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 8000b8a:	2300      	movs	r3, #0
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	3718      	adds	r7, #24
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	40021000 	.word	0x40021000
 8000b98:	40007000 	.word	0x40007000
 8000b9c:	42420060 	.word	0x42420060

08000ba0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
 8000ba8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000baa:	2300      	movs	r3, #0
 8000bac:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000bae:	4b7e      	ldr	r3, [pc, #504]	; (8000da8 <HAL_RCC_ClockConfig+0x208>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	f003 0307 	and.w	r3, r3, #7
 8000bb6:	683a      	ldr	r2, [r7, #0]
 8000bb8:	429a      	cmp	r2, r3
 8000bba:	d910      	bls.n	8000bde <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000bbc:	4b7a      	ldr	r3, [pc, #488]	; (8000da8 <HAL_RCC_ClockConfig+0x208>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	f023 0207 	bic.w	r2, r3, #7
 8000bc4:	4978      	ldr	r1, [pc, #480]	; (8000da8 <HAL_RCC_ClockConfig+0x208>)
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	4313      	orrs	r3, r2
 8000bca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000bcc:	4b76      	ldr	r3, [pc, #472]	; (8000da8 <HAL_RCC_ClockConfig+0x208>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	f003 0307 	and.w	r3, r3, #7
 8000bd4:	683a      	ldr	r2, [r7, #0]
 8000bd6:	429a      	cmp	r2, r3
 8000bd8:	d001      	beq.n	8000bde <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	e0e0      	b.n	8000da0 <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	f003 0302 	and.w	r3, r3, #2
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d020      	beq.n	8000c2c <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	f003 0304 	and.w	r3, r3, #4
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d005      	beq.n	8000c02 <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000bf6:	4b6d      	ldr	r3, [pc, #436]	; (8000dac <HAL_RCC_ClockConfig+0x20c>)
 8000bf8:	685b      	ldr	r3, [r3, #4]
 8000bfa:	4a6c      	ldr	r2, [pc, #432]	; (8000dac <HAL_RCC_ClockConfig+0x20c>)
 8000bfc:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000c00:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	f003 0308 	and.w	r3, r3, #8
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d005      	beq.n	8000c1a <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000c0e:	4b67      	ldr	r3, [pc, #412]	; (8000dac <HAL_RCC_ClockConfig+0x20c>)
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	4a66      	ldr	r2, [pc, #408]	; (8000dac <HAL_RCC_ClockConfig+0x20c>)
 8000c14:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000c18:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000c1a:	4b64      	ldr	r3, [pc, #400]	; (8000dac <HAL_RCC_ClockConfig+0x20c>)
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	689b      	ldr	r3, [r3, #8]
 8000c26:	4961      	ldr	r1, [pc, #388]	; (8000dac <HAL_RCC_ClockConfig+0x20c>)
 8000c28:	4313      	orrs	r3, r2
 8000c2a:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f003 0301 	and.w	r3, r3, #1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d06a      	beq.n	8000d0e <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	685b      	ldr	r3, [r3, #4]
 8000c3c:	2b01      	cmp	r3, #1
 8000c3e:	d107      	bne.n	8000c50 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c40:	4b5a      	ldr	r3, [pc, #360]	; (8000dac <HAL_RCC_ClockConfig+0x20c>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d115      	bne.n	8000c78 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	e0a7      	b.n	8000da0 <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	2b02      	cmp	r3, #2
 8000c56:	d107      	bne.n	8000c68 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000c58:	4b54      	ldr	r3, [pc, #336]	; (8000dac <HAL_RCC_ClockConfig+0x20c>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d109      	bne.n	8000c78 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8000c64:	2301      	movs	r3, #1
 8000c66:	e09b      	b.n	8000da0 <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c68:	4b50      	ldr	r3, [pc, #320]	; (8000dac <HAL_RCC_ClockConfig+0x20c>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	f003 0302 	and.w	r3, r3, #2
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d101      	bne.n	8000c78 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8000c74:	2301      	movs	r3, #1
 8000c76:	e093      	b.n	8000da0 <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000c78:	4b4c      	ldr	r3, [pc, #304]	; (8000dac <HAL_RCC_ClockConfig+0x20c>)
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	f023 0203 	bic.w	r2, r3, #3
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	4949      	ldr	r1, [pc, #292]	; (8000dac <HAL_RCC_ClockConfig+0x20c>)
 8000c86:	4313      	orrs	r3, r2
 8000c88:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000c8a:	f7ff fab7 	bl	80001fc <HAL_GetTick>
 8000c8e:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	2b01      	cmp	r3, #1
 8000c96:	d112      	bne.n	8000cbe <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000c98:	e00a      	b.n	8000cb0 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c9a:	f7ff faaf 	bl	80001fc <HAL_GetTick>
 8000c9e:	4602      	mov	r2, r0
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	1ad3      	subs	r3, r2, r3
 8000ca4:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d901      	bls.n	8000cb0 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 8000cac:	2303      	movs	r3, #3
 8000cae:	e077      	b.n	8000da0 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000cb0:	4b3e      	ldr	r3, [pc, #248]	; (8000dac <HAL_RCC_ClockConfig+0x20c>)
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	f003 030c 	and.w	r3, r3, #12
 8000cb8:	2b04      	cmp	r3, #4
 8000cba:	d1ee      	bne.n	8000c9a <HAL_RCC_ClockConfig+0xfa>
 8000cbc:	e027      	b.n	8000d0e <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	2b02      	cmp	r3, #2
 8000cc4:	d11d      	bne.n	8000d02 <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000cc6:	e00a      	b.n	8000cde <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000cc8:	f7ff fa98 	bl	80001fc <HAL_GetTick>
 8000ccc:	4602      	mov	r2, r0
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	1ad3      	subs	r3, r2, r3
 8000cd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d901      	bls.n	8000cde <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 8000cda:	2303      	movs	r3, #3
 8000cdc:	e060      	b.n	8000da0 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000cde:	4b33      	ldr	r3, [pc, #204]	; (8000dac <HAL_RCC_ClockConfig+0x20c>)
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	f003 030c 	and.w	r3, r3, #12
 8000ce6:	2b08      	cmp	r3, #8
 8000ce8:	d1ee      	bne.n	8000cc8 <HAL_RCC_ClockConfig+0x128>
 8000cea:	e010      	b.n	8000d0e <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000cec:	f7ff fa86 	bl	80001fc <HAL_GetTick>
 8000cf0:	4602      	mov	r2, r0
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	1ad3      	subs	r3, r2, r3
 8000cf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d901      	bls.n	8000d02 <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 8000cfe:	2303      	movs	r3, #3
 8000d00:	e04e      	b.n	8000da0 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d02:	4b2a      	ldr	r3, [pc, #168]	; (8000dac <HAL_RCC_ClockConfig+0x20c>)
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	f003 030c 	and.w	r3, r3, #12
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d1ee      	bne.n	8000cec <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000d0e:	4b26      	ldr	r3, [pc, #152]	; (8000da8 <HAL_RCC_ClockConfig+0x208>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f003 0307 	and.w	r3, r3, #7
 8000d16:	683a      	ldr	r2, [r7, #0]
 8000d18:	429a      	cmp	r2, r3
 8000d1a:	d210      	bcs.n	8000d3e <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d1c:	4b22      	ldr	r3, [pc, #136]	; (8000da8 <HAL_RCC_ClockConfig+0x208>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f023 0207 	bic.w	r2, r3, #7
 8000d24:	4920      	ldr	r1, [pc, #128]	; (8000da8 <HAL_RCC_ClockConfig+0x208>)
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000d2c:	4b1e      	ldr	r3, [pc, #120]	; (8000da8 <HAL_RCC_ClockConfig+0x208>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f003 0307 	and.w	r3, r3, #7
 8000d34:	683a      	ldr	r2, [r7, #0]
 8000d36:	429a      	cmp	r2, r3
 8000d38:	d001      	beq.n	8000d3e <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	e030      	b.n	8000da0 <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	f003 0304 	and.w	r3, r3, #4
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d008      	beq.n	8000d5c <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000d4a:	4b18      	ldr	r3, [pc, #96]	; (8000dac <HAL_RCC_ClockConfig+0x20c>)
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	68db      	ldr	r3, [r3, #12]
 8000d56:	4915      	ldr	r1, [pc, #84]	; (8000dac <HAL_RCC_ClockConfig+0x20c>)
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f003 0308 	and.w	r3, r3, #8
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d009      	beq.n	8000d7c <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000d68:	4b10      	ldr	r3, [pc, #64]	; (8000dac <HAL_RCC_ClockConfig+0x20c>)
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	691b      	ldr	r3, [r3, #16]
 8000d74:	00db      	lsls	r3, r3, #3
 8000d76:	490d      	ldr	r1, [pc, #52]	; (8000dac <HAL_RCC_ClockConfig+0x20c>)
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000d7c:	f000 f81c 	bl	8000db8 <HAL_RCC_GetSysClockFreq>
 8000d80:	4601      	mov	r1, r0
 8000d82:	4b0a      	ldr	r3, [pc, #40]	; (8000dac <HAL_RCC_ClockConfig+0x20c>)
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	091b      	lsrs	r3, r3, #4
 8000d88:	f003 030f 	and.w	r3, r3, #15
 8000d8c:	4a08      	ldr	r2, [pc, #32]	; (8000db0 <HAL_RCC_ClockConfig+0x210>)
 8000d8e:	5cd3      	ldrb	r3, [r2, r3]
 8000d90:	fa21 f303 	lsr.w	r3, r1, r3
 8000d94:	4a07      	ldr	r2, [pc, #28]	; (8000db4 <HAL_RCC_ClockConfig+0x214>)
 8000d96:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8000d98:	2000      	movs	r0, #0
 8000d9a:	f7ff f9ed 	bl	8000178 <HAL_InitTick>
  
  return HAL_OK;
 8000d9e:	2300      	movs	r3, #0
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	3710      	adds	r7, #16
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	40022000 	.word	0x40022000
 8000dac:	40021000 	.word	0x40021000
 8000db0:	080026b0 	.word	0x080026b0
 8000db4:	20000008 	.word	0x20000008

08000db8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000db8:	b490      	push	{r4, r7}
 8000dba:	b08a      	sub	sp, #40	; 0x28
 8000dbc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000dbe:	4b2a      	ldr	r3, [pc, #168]	; (8000e68 <HAL_RCC_GetSysClockFreq+0xb0>)
 8000dc0:	1d3c      	adds	r4, r7, #4
 8000dc2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000dc4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000dc8:	4b28      	ldr	r3, [pc, #160]	; (8000e6c <HAL_RCC_GetSysClockFreq+0xb4>)
 8000dca:	881b      	ldrh	r3, [r3, #0]
 8000dcc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	61fb      	str	r3, [r7, #28]
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	61bb      	str	r3, [r7, #24]
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	627b      	str	r3, [r7, #36]	; 0x24
 8000dda:	2300      	movs	r3, #0
 8000ddc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8000dde:	2300      	movs	r3, #0
 8000de0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8000de2:	4b23      	ldr	r3, [pc, #140]	; (8000e70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000de8:	69fb      	ldr	r3, [r7, #28]
 8000dea:	f003 030c 	and.w	r3, r3, #12
 8000dee:	2b04      	cmp	r3, #4
 8000df0:	d002      	beq.n	8000df8 <HAL_RCC_GetSysClockFreq+0x40>
 8000df2:	2b08      	cmp	r3, #8
 8000df4:	d003      	beq.n	8000dfe <HAL_RCC_GetSysClockFreq+0x46>
 8000df6:	e02d      	b.n	8000e54 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000df8:	4b1e      	ldr	r3, [pc, #120]	; (8000e74 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000dfa:	623b      	str	r3, [r7, #32]
      break;
 8000dfc:	e02d      	b.n	8000e5a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	0c9b      	lsrs	r3, r3, #18
 8000e02:	f003 030f 	and.w	r3, r3, #15
 8000e06:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000e0a:	4413      	add	r3, r2
 8000e0c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8000e10:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d013      	beq.n	8000e44 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000e1c:	4b14      	ldr	r3, [pc, #80]	; (8000e70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	0c5b      	lsrs	r3, r3, #17
 8000e22:	f003 0301 	and.w	r3, r3, #1
 8000e26:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000e2a:	4413      	add	r3, r2
 8000e2c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8000e30:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	4a0f      	ldr	r2, [pc, #60]	; (8000e74 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000e36:	fb02 f203 	mul.w	r2, r2, r3
 8000e3a:	69bb      	ldr	r3, [r7, #24]
 8000e3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e40:	627b      	str	r3, [r7, #36]	; 0x24
 8000e42:	e004      	b.n	8000e4e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	4a0c      	ldr	r2, [pc, #48]	; (8000e78 <HAL_RCC_GetSysClockFreq+0xc0>)
 8000e48:	fb02 f303 	mul.w	r3, r2, r3
 8000e4c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8000e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e50:	623b      	str	r3, [r7, #32]
      break;
 8000e52:	e002      	b.n	8000e5a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8000e54:	4b07      	ldr	r3, [pc, #28]	; (8000e74 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000e56:	623b      	str	r3, [r7, #32]
      break;
 8000e58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8000e5a:	6a3b      	ldr	r3, [r7, #32]
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	3728      	adds	r7, #40	; 0x28
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bc90      	pop	{r4, r7}
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	0800268c 	.word	0x0800268c
 8000e6c:	0800269c 	.word	0x0800269c
 8000e70:	40021000 	.word	0x40021000
 8000e74:	007a1200 	.word	0x007a1200
 8000e78:	003d0900 	.word	0x003d0900

08000e7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000e80:	4b02      	ldr	r3, [pc, #8]	; (8000e8c <HAL_RCC_GetHCLKFreq+0x10>)
 8000e82:	681b      	ldr	r3, [r3, #0]
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bc80      	pop	{r7}
 8000e8a:	4770      	bx	lr
 8000e8c:	20000008 	.word	0x20000008

08000e90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000e94:	f7ff fff2 	bl	8000e7c <HAL_RCC_GetHCLKFreq>
 8000e98:	4601      	mov	r1, r0
 8000e9a:	4b05      	ldr	r3, [pc, #20]	; (8000eb0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	0a1b      	lsrs	r3, r3, #8
 8000ea0:	f003 0307 	and.w	r3, r3, #7
 8000ea4:	4a03      	ldr	r2, [pc, #12]	; (8000eb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000ea6:	5cd3      	ldrb	r3, [r2, r3]
 8000ea8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8000eac:	4618      	mov	r0, r3
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	40021000 	.word	0x40021000
 8000eb4:	080026c0 	.word	0x080026c0

08000eb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000ebc:	f7ff ffde 	bl	8000e7c <HAL_RCC_GetHCLKFreq>
 8000ec0:	4601      	mov	r1, r0
 8000ec2:	4b05      	ldr	r3, [pc, #20]	; (8000ed8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	0adb      	lsrs	r3, r3, #11
 8000ec8:	f003 0307 	and.w	r3, r3, #7
 8000ecc:	4a03      	ldr	r2, [pc, #12]	; (8000edc <HAL_RCC_GetPCLK2Freq+0x24>)
 8000ece:	5cd3      	ldrb	r3, [r2, r3]
 8000ed0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	40021000 	.word	0x40021000
 8000edc:	080026c0 	.word	0x080026c0

08000ee0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b085      	sub	sp, #20
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000ee8:	4b0a      	ldr	r3, [pc, #40]	; (8000f14 <RCC_Delay+0x34>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a0a      	ldr	r2, [pc, #40]	; (8000f18 <RCC_Delay+0x38>)
 8000eee:	fba2 2303 	umull	r2, r3, r2, r3
 8000ef2:	0a5b      	lsrs	r3, r3, #9
 8000ef4:	687a      	ldr	r2, [r7, #4]
 8000ef6:	fb02 f303 	mul.w	r3, r2, r3
 8000efa:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8000efc:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	1e5a      	subs	r2, r3, #1
 8000f02:	60fa      	str	r2, [r7, #12]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d1f9      	bne.n	8000efc <RCC_Delay+0x1c>
}
 8000f08:	bf00      	nop
 8000f0a:	3714      	adds	r7, #20
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bc80      	pop	{r7}
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	20000008 	.word	0x20000008
 8000f18:	10624dd3 	.word	0x10624dd3

08000f1c <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d101      	bne.n	8000f2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	e03f      	b.n	8000fae <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d106      	bne.n	8000f48 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8000f42:	6878      	ldr	r0, [r7, #4]
 8000f44:	f000 fb10 	bl	8001568 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2224      	movs	r2, #36	; 0x24
 8000f4c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	68da      	ldr	r2, [r3, #12]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000f5e:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8000f60:	6878      	ldr	r0, [r7, #4]
 8000f62:	f000 f90b 	bl	800117c <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	691a      	ldr	r2, [r3, #16]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8000f74:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	695a      	ldr	r2, [r3, #20]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8000f84:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	68da      	ldr	r2, [r3, #12]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000f94:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2200      	movs	r2, #0
 8000f9a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2220      	movs	r2, #32
 8000fa0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2220      	movs	r2, #32
 8000fa8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 8000fac:	2300      	movs	r3, #0
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}

08000fb6 <HAL_UART_Transmit>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	b088      	sub	sp, #32
 8000fba:	af02      	add	r7, sp, #8
 8000fbc:	60f8      	str	r0, [r7, #12]
 8000fbe:	60b9      	str	r1, [r7, #8]
 8000fc0:	603b      	str	r3, [r7, #0]
 8000fc2:	4613      	mov	r3, r2
 8000fc4:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	617b      	str	r3, [r7, #20]
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	2b20      	cmp	r3, #32
 8000fd4:	f040 8083 	bne.w	80010de <HAL_UART_Transmit+0x128>
  {
    if((pData == NULL) || (Size == 0U))
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d002      	beq.n	8000fe4 <HAL_UART_Transmit+0x2e>
 8000fde:	88fb      	ldrh	r3, [r7, #6]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d101      	bne.n	8000fe8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	e07b      	b.n	80010e0 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000fee:	2b01      	cmp	r3, #1
 8000ff0:	d101      	bne.n	8000ff6 <HAL_UART_Transmit+0x40>
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	e074      	b.n	80010e0 <HAL_UART_Transmit+0x12a>
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	2200      	movs	r2, #0
 8001002:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	2221      	movs	r2, #33	; 0x21
 8001008:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800100c:	f7ff f8f6 	bl	80001fc <HAL_GetTick>
 8001010:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	88fa      	ldrh	r2, [r7, #6]
 8001016:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	88fa      	ldrh	r2, [r7, #6]
 800101c:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 800101e:	e042      	b.n	80010a6 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001024:	b29b      	uxth	r3, r3
 8001026:	3b01      	subs	r3, #1
 8001028:	b29a      	uxth	r2, r3
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	689b      	ldr	r3, [r3, #8]
 8001032:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001036:	d122      	bne.n	800107e <HAL_UART_Transmit+0xc8>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	9300      	str	r3, [sp, #0]
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	2200      	movs	r2, #0
 8001040:	2180      	movs	r1, #128	; 0x80
 8001042:	68f8      	ldr	r0, [r7, #12]
 8001044:	f000 f850 	bl	80010e8 <UART_WaitOnFlagUntilTimeout>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 800104e:	2303      	movs	r3, #3
 8001050:	e046      	b.n	80010e0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t*) pData;
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	881b      	ldrh	r3, [r3, #0]
 800105a:	461a      	mov	r2, r3
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001064:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	691b      	ldr	r3, [r3, #16]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d103      	bne.n	8001076 <HAL_UART_Transmit+0xc0>
        {
          pData +=2U;
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	3302      	adds	r3, #2
 8001072:	60bb      	str	r3, [r7, #8]
 8001074:	e017      	b.n	80010a6 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData +=1U;
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	3301      	adds	r3, #1
 800107a:	60bb      	str	r3, [r7, #8]
 800107c:	e013      	b.n	80010a6 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	9300      	str	r3, [sp, #0]
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	2200      	movs	r2, #0
 8001086:	2180      	movs	r1, #128	; 0x80
 8001088:	68f8      	ldr	r0, [r7, #12]
 800108a:	f000 f82d 	bl	80010e8 <UART_WaitOnFlagUntilTimeout>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8001094:	2303      	movs	r3, #3
 8001096:	e023      	b.n	80010e0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	1c5a      	adds	r2, r3, #1
 800109c:	60ba      	str	r2, [r7, #8]
 800109e:	781a      	ldrb	r2, [r3, #0]
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	605a      	str	r2, [r3, #4]
    while(huart->TxXferCount > 0U)
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80010aa:	b29b      	uxth	r3, r3
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d1b7      	bne.n	8001020 <HAL_UART_Transmit+0x6a>
      }
    }

    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	9300      	str	r3, [sp, #0]
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	2200      	movs	r2, #0
 80010b8:	2140      	movs	r1, #64	; 0x40
 80010ba:	68f8      	ldr	r0, [r7, #12]
 80010bc:	f000 f814 	bl	80010e8 <UART_WaitOnFlagUntilTimeout>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80010c6:	2303      	movs	r3, #3
 80010c8:	e00a      	b.n	80010e0 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	2220      	movs	r2, #32
 80010ce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	2200      	movs	r2, #0
 80010d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80010da:	2300      	movs	r3, #0
 80010dc:	e000      	b.n	80010e0 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80010de:	2302      	movs	r3, #2
  }
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3718      	adds	r7, #24
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	60f8      	str	r0, [r7, #12]
 80010f0:	60b9      	str	r1, [r7, #8]
 80010f2:	603b      	str	r3, [r7, #0]
 80010f4:	4613      	mov	r3, r2
 80010f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 80010f8:	e02c      	b.n	8001154 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80010fa:	69bb      	ldr	r3, [r7, #24]
 80010fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001100:	d028      	beq.n	8001154 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001102:	69bb      	ldr	r3, [r7, #24]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d007      	beq.n	8001118 <UART_WaitOnFlagUntilTimeout+0x30>
 8001108:	f7ff f878 	bl	80001fc <HAL_GetTick>
 800110c:	4602      	mov	r2, r0
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	1ad3      	subs	r3, r2, r3
 8001112:	69ba      	ldr	r2, [r7, #24]
 8001114:	429a      	cmp	r2, r3
 8001116:	d21d      	bcs.n	8001154 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	68da      	ldr	r2, [r3, #12]
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001126:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	695a      	ldr	r2, [r3, #20]
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f022 0201 	bic.w	r2, r2, #1
 8001136:	615a      	str	r2, [r3, #20]
        
        huart->gState  = HAL_UART_STATE_READY;
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	2220      	movs	r2, #32
 800113c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	2220      	movs	r2, #32
 8001144:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	2200      	movs	r2, #0
 800114c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_TIMEOUT;
 8001150:	2303      	movs	r3, #3
 8001152:	e00f      	b.n	8001174 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	68bb      	ldr	r3, [r7, #8]
 800115c:	4013      	ands	r3, r2
 800115e:	68ba      	ldr	r2, [r7, #8]
 8001160:	429a      	cmp	r2, r3
 8001162:	bf0c      	ite	eq
 8001164:	2301      	moveq	r3, #1
 8001166:	2300      	movne	r3, #0
 8001168:	b2db      	uxtb	r3, r3
 800116a:	461a      	mov	r2, r3
 800116c:	79fb      	ldrb	r3, [r7, #7]
 800116e:	429a      	cmp	r2, r3
 8001170:	d0c3      	beq.n	80010fa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 8001172:	2300      	movs	r3, #0
}
 8001174:	4618      	mov	r0, r3
 8001176:	3710      	adds	r7, #16
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}

0800117c <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800117c:	b5b0      	push	{r4, r5, r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8001184:	2300      	movs	r3, #0
 8001186:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	691b      	ldr	r3, [r3, #16]
 800118e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	68da      	ldr	r2, [r3, #12]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	430a      	orrs	r2, r1
 800119c:	611a      	str	r2, [r3, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	689a      	ldr	r2, [r3, #8]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	691b      	ldr	r3, [r3, #16]
 80011a6:	431a      	orrs	r2, r3
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	695b      	ldr	r3, [r3, #20]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	68fa      	ldr	r2, [r7, #12]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, 
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	68db      	ldr	r3, [r3, #12]
 80011ba:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80011be:	f023 030c 	bic.w	r3, r3, #12
 80011c2:	687a      	ldr	r2, [r7, #4]
 80011c4:	6812      	ldr	r2, [r2, #0]
 80011c6:	68f9      	ldr	r1, [r7, #12]
 80011c8:	430b      	orrs	r3, r1
 80011ca:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	695b      	ldr	r3, [r3, #20]
 80011d2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	699a      	ldr	r2, [r3, #24]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	430a      	orrs	r2, r1
 80011e0:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a6f      	ldr	r2, [pc, #444]	; (80013a4 <UART_SetConfig+0x228>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d16b      	bne.n	80012c4 <UART_SetConfig+0x148>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80011ec:	f7ff fe64 	bl	8000eb8 <HAL_RCC_GetPCLK2Freq>
 80011f0:	4602      	mov	r2, r0
 80011f2:	4613      	mov	r3, r2
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	4413      	add	r3, r2
 80011f8:	009a      	lsls	r2, r3, #2
 80011fa:	441a      	add	r2, r3
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	009b      	lsls	r3, r3, #2
 8001202:	fbb2 f3f3 	udiv	r3, r2, r3
 8001206:	4a68      	ldr	r2, [pc, #416]	; (80013a8 <UART_SetConfig+0x22c>)
 8001208:	fba2 2303 	umull	r2, r3, r2, r3
 800120c:	095b      	lsrs	r3, r3, #5
 800120e:	011c      	lsls	r4, r3, #4
 8001210:	f7ff fe52 	bl	8000eb8 <HAL_RCC_GetPCLK2Freq>
 8001214:	4602      	mov	r2, r0
 8001216:	4613      	mov	r3, r2
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	4413      	add	r3, r2
 800121c:	009a      	lsls	r2, r3, #2
 800121e:	441a      	add	r2, r3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	fbb2 f5f3 	udiv	r5, r2, r3
 800122a:	f7ff fe45 	bl	8000eb8 <HAL_RCC_GetPCLK2Freq>
 800122e:	4602      	mov	r2, r0
 8001230:	4613      	mov	r3, r2
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	4413      	add	r3, r2
 8001236:	009a      	lsls	r2, r3, #2
 8001238:	441a      	add	r2, r3
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	fbb2 f3f3 	udiv	r3, r2, r3
 8001244:	4a58      	ldr	r2, [pc, #352]	; (80013a8 <UART_SetConfig+0x22c>)
 8001246:	fba2 2303 	umull	r2, r3, r2, r3
 800124a:	095b      	lsrs	r3, r3, #5
 800124c:	2264      	movs	r2, #100	; 0x64
 800124e:	fb02 f303 	mul.w	r3, r2, r3
 8001252:	1aeb      	subs	r3, r5, r3
 8001254:	011b      	lsls	r3, r3, #4
 8001256:	3332      	adds	r3, #50	; 0x32
 8001258:	4a53      	ldr	r2, [pc, #332]	; (80013a8 <UART_SetConfig+0x22c>)
 800125a:	fba2 2303 	umull	r2, r3, r2, r3
 800125e:	095b      	lsrs	r3, r3, #5
 8001260:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001264:	441c      	add	r4, r3
 8001266:	f7ff fe27 	bl	8000eb8 <HAL_RCC_GetPCLK2Freq>
 800126a:	4602      	mov	r2, r0
 800126c:	4613      	mov	r3, r2
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	4413      	add	r3, r2
 8001272:	009a      	lsls	r2, r3, #2
 8001274:	441a      	add	r2, r3
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	fbb2 f5f3 	udiv	r5, r2, r3
 8001280:	f7ff fe1a 	bl	8000eb8 <HAL_RCC_GetPCLK2Freq>
 8001284:	4602      	mov	r2, r0
 8001286:	4613      	mov	r3, r2
 8001288:	009b      	lsls	r3, r3, #2
 800128a:	4413      	add	r3, r2
 800128c:	009a      	lsls	r2, r3, #2
 800128e:	441a      	add	r2, r3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	fbb2 f3f3 	udiv	r3, r2, r3
 800129a:	4a43      	ldr	r2, [pc, #268]	; (80013a8 <UART_SetConfig+0x22c>)
 800129c:	fba2 2303 	umull	r2, r3, r2, r3
 80012a0:	095b      	lsrs	r3, r3, #5
 80012a2:	2264      	movs	r2, #100	; 0x64
 80012a4:	fb02 f303 	mul.w	r3, r2, r3
 80012a8:	1aeb      	subs	r3, r5, r3
 80012aa:	011b      	lsls	r3, r3, #4
 80012ac:	3332      	adds	r3, #50	; 0x32
 80012ae:	4a3e      	ldr	r2, [pc, #248]	; (80013a8 <UART_SetConfig+0x22c>)
 80012b0:	fba2 2303 	umull	r2, r3, r2, r3
 80012b4:	095b      	lsrs	r3, r3, #5
 80012b6:	f003 020f 	and.w	r2, r3, #15
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4422      	add	r2, r4
 80012c0:	609a      	str	r2, [r3, #8]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 80012c2:	e06a      	b.n	800139a <UART_SetConfig+0x21e>
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80012c4:	f7ff fde4 	bl	8000e90 <HAL_RCC_GetPCLK1Freq>
 80012c8:	4602      	mov	r2, r0
 80012ca:	4613      	mov	r3, r2
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	4413      	add	r3, r2
 80012d0:	009a      	lsls	r2, r3, #2
 80012d2:	441a      	add	r2, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	fbb2 f3f3 	udiv	r3, r2, r3
 80012de:	4a32      	ldr	r2, [pc, #200]	; (80013a8 <UART_SetConfig+0x22c>)
 80012e0:	fba2 2303 	umull	r2, r3, r2, r3
 80012e4:	095b      	lsrs	r3, r3, #5
 80012e6:	011c      	lsls	r4, r3, #4
 80012e8:	f7ff fdd2 	bl	8000e90 <HAL_RCC_GetPCLK1Freq>
 80012ec:	4602      	mov	r2, r0
 80012ee:	4613      	mov	r3, r2
 80012f0:	009b      	lsls	r3, r3, #2
 80012f2:	4413      	add	r3, r2
 80012f4:	009a      	lsls	r2, r3, #2
 80012f6:	441a      	add	r2, r3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	fbb2 f5f3 	udiv	r5, r2, r3
 8001302:	f7ff fdc5 	bl	8000e90 <HAL_RCC_GetPCLK1Freq>
 8001306:	4602      	mov	r2, r0
 8001308:	4613      	mov	r3, r2
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	4413      	add	r3, r2
 800130e:	009a      	lsls	r2, r3, #2
 8001310:	441a      	add	r2, r3
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	fbb2 f3f3 	udiv	r3, r2, r3
 800131c:	4a22      	ldr	r2, [pc, #136]	; (80013a8 <UART_SetConfig+0x22c>)
 800131e:	fba2 2303 	umull	r2, r3, r2, r3
 8001322:	095b      	lsrs	r3, r3, #5
 8001324:	2264      	movs	r2, #100	; 0x64
 8001326:	fb02 f303 	mul.w	r3, r2, r3
 800132a:	1aeb      	subs	r3, r5, r3
 800132c:	011b      	lsls	r3, r3, #4
 800132e:	3332      	adds	r3, #50	; 0x32
 8001330:	4a1d      	ldr	r2, [pc, #116]	; (80013a8 <UART_SetConfig+0x22c>)
 8001332:	fba2 2303 	umull	r2, r3, r2, r3
 8001336:	095b      	lsrs	r3, r3, #5
 8001338:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800133c:	441c      	add	r4, r3
 800133e:	f7ff fda7 	bl	8000e90 <HAL_RCC_GetPCLK1Freq>
 8001342:	4602      	mov	r2, r0
 8001344:	4613      	mov	r3, r2
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	4413      	add	r3, r2
 800134a:	009a      	lsls	r2, r3, #2
 800134c:	441a      	add	r2, r3
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	fbb2 f5f3 	udiv	r5, r2, r3
 8001358:	f7ff fd9a 	bl	8000e90 <HAL_RCC_GetPCLK1Freq>
 800135c:	4602      	mov	r2, r0
 800135e:	4613      	mov	r3, r2
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	4413      	add	r3, r2
 8001364:	009a      	lsls	r2, r3, #2
 8001366:	441a      	add	r2, r3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001372:	4a0d      	ldr	r2, [pc, #52]	; (80013a8 <UART_SetConfig+0x22c>)
 8001374:	fba2 2303 	umull	r2, r3, r2, r3
 8001378:	095b      	lsrs	r3, r3, #5
 800137a:	2264      	movs	r2, #100	; 0x64
 800137c:	fb02 f303 	mul.w	r3, r2, r3
 8001380:	1aeb      	subs	r3, r5, r3
 8001382:	011b      	lsls	r3, r3, #4
 8001384:	3332      	adds	r3, #50	; 0x32
 8001386:	4a08      	ldr	r2, [pc, #32]	; (80013a8 <UART_SetConfig+0x22c>)
 8001388:	fba2 2303 	umull	r2, r3, r2, r3
 800138c:	095b      	lsrs	r3, r3, #5
 800138e:	f003 020f 	and.w	r2, r3, #15
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4422      	add	r2, r4
 8001398:	609a      	str	r2, [r3, #8]
}
 800139a:	bf00      	nop
 800139c:	3710      	adds	r7, #16
 800139e:	46bd      	mov	sp, r7
 80013a0:	bdb0      	pop	{r4, r5, r7, pc}
 80013a2:	bf00      	nop
 80013a4:	40013800 	.word	0x40013800
 80013a8:	51eb851f 	.word	0x51eb851f

080013ac <__io_putchar>:
#ifdef __GNUC__
	#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
	#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *) &ch, 1, 0xFFFF);
 80013b4:	1d39      	adds	r1, r7, #4
 80013b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013ba:	2201      	movs	r2, #1
 80013bc:	4803      	ldr	r0, [pc, #12]	; (80013cc <__io_putchar+0x20>)
 80013be:	f7ff fdfa 	bl	8000fb6 <HAL_UART_Transmit>
	return ch;
 80013c2:	687b      	ldr	r3, [r7, #4]
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3708      	adds	r7, #8
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	2000009c 	.word	0x2000009c

080013d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013d6:	f7fe feb9 	bl	800014c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013da:	f000 f811 	bl	8001400 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013de:	f000 f875 	bl	80014cc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80013e2:	f000 f849 	bl	8001478 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  int age = 22;
 80013e6:	2316      	movs	r3, #22
 80013e8:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	// Now you can use printf() to print to a serial monitor through the UART interface.
	printf("My age is: %d\r\n", age);
 80013ea:	6879      	ldr	r1, [r7, #4]
 80013ec:	4803      	ldr	r0, [pc, #12]	; (80013fc <main+0x2c>)
 80013ee:	f000 fa53 	bl	8001898 <iprintf>
	HAL_Delay(500);
 80013f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80013f6:	f7fe ff0b 	bl	8000210 <HAL_Delay>
	printf("My age is: %d\r\n", age);
 80013fa:	e7f6      	b.n	80013ea <main+0x1a>
 80013fc:	080026a0 	.word	0x080026a0

08001400 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b090      	sub	sp, #64	; 0x40
 8001404:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001406:	f107 0318 	add.w	r3, r7, #24
 800140a:	2228      	movs	r2, #40	; 0x28
 800140c:	2100      	movs	r1, #0
 800140e:	4618      	mov	r0, r3
 8001410:	f000 fa3a 	bl	8001888 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001414:	1d3b      	adds	r3, r7, #4
 8001416:	2200      	movs	r2, #0
 8001418:	601a      	str	r2, [r3, #0]
 800141a:	605a      	str	r2, [r3, #4]
 800141c:	609a      	str	r2, [r3, #8]
 800141e:	60da      	str	r2, [r3, #12]
 8001420:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001422:	2302      	movs	r3, #2
 8001424:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001426:	2301      	movs	r3, #1
 8001428:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800142a:	2310      	movs	r3, #16
 800142c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800142e:	2300      	movs	r3, #0
 8001430:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001432:	f107 0318 	add.w	r3, r7, #24
 8001436:	4618      	mov	r0, r3
 8001438:	f7ff f94e 	bl	80006d8 <HAL_RCC_OscConfig>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001442:	f000 f859 	bl	80014f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001446:	230f      	movs	r3, #15
 8001448:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800144a:	2300      	movs	r3, #0
 800144c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800144e:	2300      	movs	r3, #0
 8001450:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001452:	2300      	movs	r3, #0
 8001454:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001456:	2300      	movs	r3, #0
 8001458:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800145a:	1d3b      	adds	r3, r7, #4
 800145c:	2100      	movs	r1, #0
 800145e:	4618      	mov	r0, r3
 8001460:	f7ff fb9e 	bl	8000ba0 <HAL_RCC_ClockConfig>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800146a:	f000 f845 	bl	80014f8 <Error_Handler>
  }
}
 800146e:	bf00      	nop
 8001470:	3740      	adds	r7, #64	; 0x40
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
	...

08001478 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800147c:	4b11      	ldr	r3, [pc, #68]	; (80014c4 <MX_USART1_UART_Init+0x4c>)
 800147e:	4a12      	ldr	r2, [pc, #72]	; (80014c8 <MX_USART1_UART_Init+0x50>)
 8001480:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001482:	4b10      	ldr	r3, [pc, #64]	; (80014c4 <MX_USART1_UART_Init+0x4c>)
 8001484:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001488:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800148a:	4b0e      	ldr	r3, [pc, #56]	; (80014c4 <MX_USART1_UART_Init+0x4c>)
 800148c:	2200      	movs	r2, #0
 800148e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001490:	4b0c      	ldr	r3, [pc, #48]	; (80014c4 <MX_USART1_UART_Init+0x4c>)
 8001492:	2200      	movs	r2, #0
 8001494:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001496:	4b0b      	ldr	r3, [pc, #44]	; (80014c4 <MX_USART1_UART_Init+0x4c>)
 8001498:	2200      	movs	r2, #0
 800149a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800149c:	4b09      	ldr	r3, [pc, #36]	; (80014c4 <MX_USART1_UART_Init+0x4c>)
 800149e:	220c      	movs	r2, #12
 80014a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014a2:	4b08      	ldr	r3, [pc, #32]	; (80014c4 <MX_USART1_UART_Init+0x4c>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014a8:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <MX_USART1_UART_Init+0x4c>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014ae:	4805      	ldr	r0, [pc, #20]	; (80014c4 <MX_USART1_UART_Init+0x4c>)
 80014b0:	f7ff fd34 	bl	8000f1c <HAL_UART_Init>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80014ba:	f000 f81d 	bl	80014f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80014be:	bf00      	nop
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	2000009c 	.word	0x2000009c
 80014c8:	40013800 	.word	0x40013800

080014cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d2:	4b08      	ldr	r3, [pc, #32]	; (80014f4 <MX_GPIO_Init+0x28>)
 80014d4:	699b      	ldr	r3, [r3, #24]
 80014d6:	4a07      	ldr	r2, [pc, #28]	; (80014f4 <MX_GPIO_Init+0x28>)
 80014d8:	f043 0304 	orr.w	r3, r3, #4
 80014dc:	6193      	str	r3, [r2, #24]
 80014de:	4b05      	ldr	r3, [pc, #20]	; (80014f4 <MX_GPIO_Init+0x28>)
 80014e0:	699b      	ldr	r3, [r3, #24]
 80014e2:	f003 0304 	and.w	r3, r3, #4
 80014e6:	607b      	str	r3, [r7, #4]
 80014e8:	687b      	ldr	r3, [r7, #4]

}
 80014ea:	bf00      	nop
 80014ec:	370c      	adds	r7, #12
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bc80      	pop	{r7}
 80014f2:	4770      	bx	lr
 80014f4:	40021000 	.word	0x40021000

080014f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80014fc:	bf00      	nop
 80014fe:	46bd      	mov	sp, r7
 8001500:	bc80      	pop	{r7}
 8001502:	4770      	bx	lr

08001504 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001504:	b480      	push	{r7}
 8001506:	b085      	sub	sp, #20
 8001508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800150a:	4b15      	ldr	r3, [pc, #84]	; (8001560 <HAL_MspInit+0x5c>)
 800150c:	699b      	ldr	r3, [r3, #24]
 800150e:	4a14      	ldr	r2, [pc, #80]	; (8001560 <HAL_MspInit+0x5c>)
 8001510:	f043 0301 	orr.w	r3, r3, #1
 8001514:	6193      	str	r3, [r2, #24]
 8001516:	4b12      	ldr	r3, [pc, #72]	; (8001560 <HAL_MspInit+0x5c>)
 8001518:	699b      	ldr	r3, [r3, #24]
 800151a:	f003 0301 	and.w	r3, r3, #1
 800151e:	60bb      	str	r3, [r7, #8]
 8001520:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001522:	4b0f      	ldr	r3, [pc, #60]	; (8001560 <HAL_MspInit+0x5c>)
 8001524:	69db      	ldr	r3, [r3, #28]
 8001526:	4a0e      	ldr	r2, [pc, #56]	; (8001560 <HAL_MspInit+0x5c>)
 8001528:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800152c:	61d3      	str	r3, [r2, #28]
 800152e:	4b0c      	ldr	r3, [pc, #48]	; (8001560 <HAL_MspInit+0x5c>)
 8001530:	69db      	ldr	r3, [r3, #28]
 8001532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001536:	607b      	str	r3, [r7, #4]
 8001538:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800153a:	4b0a      	ldr	r3, [pc, #40]	; (8001564 <HAL_MspInit+0x60>)
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	60fb      	str	r3, [r7, #12]
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001546:	60fb      	str	r3, [r7, #12]
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800154e:	60fb      	str	r3, [r7, #12]
 8001550:	4a04      	ldr	r2, [pc, #16]	; (8001564 <HAL_MspInit+0x60>)
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001556:	bf00      	nop
 8001558:	3714      	adds	r7, #20
 800155a:	46bd      	mov	sp, r7
 800155c:	bc80      	pop	{r7}
 800155e:	4770      	bx	lr
 8001560:	40021000 	.word	0x40021000
 8001564:	40010000 	.word	0x40010000

08001568 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b088      	sub	sp, #32
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001570:	f107 0310 	add.w	r3, r7, #16
 8001574:	2200      	movs	r2, #0
 8001576:	601a      	str	r2, [r3, #0]
 8001578:	605a      	str	r2, [r3, #4]
 800157a:	609a      	str	r2, [r3, #8]
 800157c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a1c      	ldr	r2, [pc, #112]	; (80015f4 <HAL_UART_MspInit+0x8c>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d131      	bne.n	80015ec <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001588:	4b1b      	ldr	r3, [pc, #108]	; (80015f8 <HAL_UART_MspInit+0x90>)
 800158a:	699b      	ldr	r3, [r3, #24]
 800158c:	4a1a      	ldr	r2, [pc, #104]	; (80015f8 <HAL_UART_MspInit+0x90>)
 800158e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001592:	6193      	str	r3, [r2, #24]
 8001594:	4b18      	ldr	r3, [pc, #96]	; (80015f8 <HAL_UART_MspInit+0x90>)
 8001596:	699b      	ldr	r3, [r3, #24]
 8001598:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800159c:	60fb      	str	r3, [r7, #12]
 800159e:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a0:	4b15      	ldr	r3, [pc, #84]	; (80015f8 <HAL_UART_MspInit+0x90>)
 80015a2:	699b      	ldr	r3, [r3, #24]
 80015a4:	4a14      	ldr	r2, [pc, #80]	; (80015f8 <HAL_UART_MspInit+0x90>)
 80015a6:	f043 0304 	orr.w	r3, r3, #4
 80015aa:	6193      	str	r3, [r2, #24]
 80015ac:	4b12      	ldr	r3, [pc, #72]	; (80015f8 <HAL_UART_MspInit+0x90>)
 80015ae:	699b      	ldr	r3, [r3, #24]
 80015b0:	f003 0304 	and.w	r3, r3, #4
 80015b4:	60bb      	str	r3, [r7, #8]
 80015b6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80015b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015bc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015be:	2302      	movs	r3, #2
 80015c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015c2:	2303      	movs	r3, #3
 80015c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c6:	f107 0310 	add.w	r3, r7, #16
 80015ca:	4619      	mov	r1, r3
 80015cc:	480b      	ldr	r0, [pc, #44]	; (80015fc <HAL_UART_MspInit+0x94>)
 80015ce:	f7fe ff25 	bl	800041c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80015d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015d8:	2300      	movs	r3, #0
 80015da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015dc:	2300      	movs	r3, #0
 80015de:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e0:	f107 0310 	add.w	r3, r7, #16
 80015e4:	4619      	mov	r1, r3
 80015e6:	4805      	ldr	r0, [pc, #20]	; (80015fc <HAL_UART_MspInit+0x94>)
 80015e8:	f7fe ff18 	bl	800041c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80015ec:	bf00      	nop
 80015ee:	3720      	adds	r7, #32
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	40013800 	.word	0x40013800
 80015f8:	40021000 	.word	0x40021000
 80015fc:	40010800 	.word	0x40010800

08001600 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001604:	bf00      	nop
 8001606:	46bd      	mov	sp, r7
 8001608:	bc80      	pop	{r7}
 800160a:	4770      	bx	lr

0800160c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001610:	e7fe      	b.n	8001610 <HardFault_Handler+0x4>

08001612 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001612:	b480      	push	{r7}
 8001614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001616:	e7fe      	b.n	8001616 <MemManage_Handler+0x4>

08001618 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800161c:	e7fe      	b.n	800161c <BusFault_Handler+0x4>

0800161e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800161e:	b480      	push	{r7}
 8001620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001622:	e7fe      	b.n	8001622 <UsageFault_Handler+0x4>

08001624 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001628:	bf00      	nop
 800162a:	46bd      	mov	sp, r7
 800162c:	bc80      	pop	{r7}
 800162e:	4770      	bx	lr

08001630 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001634:	bf00      	nop
 8001636:	46bd      	mov	sp, r7
 8001638:	bc80      	pop	{r7}
 800163a:	4770      	bx	lr

0800163c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001640:	bf00      	nop
 8001642:	46bd      	mov	sp, r7
 8001644:	bc80      	pop	{r7}
 8001646:	4770      	bx	lr

08001648 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800164c:	f7fe fdc4 	bl	80001d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001650:	bf00      	nop
 8001652:	bd80      	pop	{r7, pc}

08001654 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b086      	sub	sp, #24
 8001658:	af00      	add	r7, sp, #0
 800165a:	60f8      	str	r0, [r7, #12]
 800165c:	60b9      	str	r1, [r7, #8]
 800165e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001660:	2300      	movs	r3, #0
 8001662:	617b      	str	r3, [r7, #20]
 8001664:	e00a      	b.n	800167c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001666:	f3af 8000 	nop.w
 800166a:	4601      	mov	r1, r0
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	1c5a      	adds	r2, r3, #1
 8001670:	60ba      	str	r2, [r7, #8]
 8001672:	b2ca      	uxtb	r2, r1
 8001674:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	3301      	adds	r3, #1
 800167a:	617b      	str	r3, [r7, #20]
 800167c:	697a      	ldr	r2, [r7, #20]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	429a      	cmp	r2, r3
 8001682:	dbf0      	blt.n	8001666 <_read+0x12>
	}

return len;
 8001684:	687b      	ldr	r3, [r7, #4]
}
 8001686:	4618      	mov	r0, r3
 8001688:	3718      	adds	r7, #24
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}

0800168e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800168e:	b580      	push	{r7, lr}
 8001690:	b086      	sub	sp, #24
 8001692:	af00      	add	r7, sp, #0
 8001694:	60f8      	str	r0, [r7, #12]
 8001696:	60b9      	str	r1, [r7, #8]
 8001698:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800169a:	2300      	movs	r3, #0
 800169c:	617b      	str	r3, [r7, #20]
 800169e:	e009      	b.n	80016b4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	1c5a      	adds	r2, r3, #1
 80016a4:	60ba      	str	r2, [r7, #8]
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7ff fe7f 	bl	80013ac <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	3301      	adds	r3, #1
 80016b2:	617b      	str	r3, [r7, #20]
 80016b4:	697a      	ldr	r2, [r7, #20]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	429a      	cmp	r2, r3
 80016ba:	dbf1      	blt.n	80016a0 <_write+0x12>
	}
	return len;
 80016bc:	687b      	ldr	r3, [r7, #4]
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3718      	adds	r7, #24
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <_close>:

int _close(int file)
{
 80016c6:	b480      	push	{r7}
 80016c8:	b083      	sub	sp, #12
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
	return -1;
 80016ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	370c      	adds	r7, #12
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bc80      	pop	{r7}
 80016da:	4770      	bx	lr

080016dc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016ec:	605a      	str	r2, [r3, #4]
	return 0;
 80016ee:	2300      	movs	r3, #0
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	370c      	adds	r7, #12
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bc80      	pop	{r7}
 80016f8:	4770      	bx	lr

080016fa <_isatty>:

int _isatty(int file)
{
 80016fa:	b480      	push	{r7}
 80016fc:	b083      	sub	sp, #12
 80016fe:	af00      	add	r7, sp, #0
 8001700:	6078      	str	r0, [r7, #4]
	return 1;
 8001702:	2301      	movs	r3, #1
}
 8001704:	4618      	mov	r0, r3
 8001706:	370c      	adds	r7, #12
 8001708:	46bd      	mov	sp, r7
 800170a:	bc80      	pop	{r7}
 800170c:	4770      	bx	lr

0800170e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800170e:	b480      	push	{r7}
 8001710:	b085      	sub	sp, #20
 8001712:	af00      	add	r7, sp, #0
 8001714:	60f8      	str	r0, [r7, #12]
 8001716:	60b9      	str	r1, [r7, #8]
 8001718:	607a      	str	r2, [r7, #4]
	return 0;
 800171a:	2300      	movs	r3, #0
}
 800171c:	4618      	mov	r0, r3
 800171e:	3714      	adds	r7, #20
 8001720:	46bd      	mov	sp, r7
 8001722:	bc80      	pop	{r7}
 8001724:	4770      	bx	lr
	...

08001728 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001730:	4b11      	ldr	r3, [pc, #68]	; (8001778 <_sbrk+0x50>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d102      	bne.n	800173e <_sbrk+0x16>
		heap_end = &end;
 8001738:	4b0f      	ldr	r3, [pc, #60]	; (8001778 <_sbrk+0x50>)
 800173a:	4a10      	ldr	r2, [pc, #64]	; (800177c <_sbrk+0x54>)
 800173c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800173e:	4b0e      	ldr	r3, [pc, #56]	; (8001778 <_sbrk+0x50>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001744:	4b0c      	ldr	r3, [pc, #48]	; (8001778 <_sbrk+0x50>)
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	4413      	add	r3, r2
 800174c:	466a      	mov	r2, sp
 800174e:	4293      	cmp	r3, r2
 8001750:	d907      	bls.n	8001762 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001752:	f000 f86f 	bl	8001834 <__errno>
 8001756:	4602      	mov	r2, r0
 8001758:	230c      	movs	r3, #12
 800175a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800175c:	f04f 33ff 	mov.w	r3, #4294967295
 8001760:	e006      	b.n	8001770 <_sbrk+0x48>
	}

	heap_end += incr;
 8001762:	4b05      	ldr	r3, [pc, #20]	; (8001778 <_sbrk+0x50>)
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4413      	add	r3, r2
 800176a:	4a03      	ldr	r2, [pc, #12]	; (8001778 <_sbrk+0x50>)
 800176c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800176e:	68fb      	ldr	r3, [r7, #12]
}
 8001770:	4618      	mov	r0, r3
 8001772:	3710      	adds	r7, #16
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	2000008c 	.word	0x2000008c
 800177c:	200000e0 	.word	0x200000e0

08001780 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001784:	4b15      	ldr	r3, [pc, #84]	; (80017dc <SystemInit+0x5c>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a14      	ldr	r2, [pc, #80]	; (80017dc <SystemInit+0x5c>)
 800178a:	f043 0301 	orr.w	r3, r3, #1
 800178e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001790:	4b12      	ldr	r3, [pc, #72]	; (80017dc <SystemInit+0x5c>)
 8001792:	685a      	ldr	r2, [r3, #4]
 8001794:	4911      	ldr	r1, [pc, #68]	; (80017dc <SystemInit+0x5c>)
 8001796:	4b12      	ldr	r3, [pc, #72]	; (80017e0 <SystemInit+0x60>)
 8001798:	4013      	ands	r3, r2
 800179a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800179c:	4b0f      	ldr	r3, [pc, #60]	; (80017dc <SystemInit+0x5c>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a0e      	ldr	r2, [pc, #56]	; (80017dc <SystemInit+0x5c>)
 80017a2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80017a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017aa:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80017ac:	4b0b      	ldr	r3, [pc, #44]	; (80017dc <SystemInit+0x5c>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a0a      	ldr	r2, [pc, #40]	; (80017dc <SystemInit+0x5c>)
 80017b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017b6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80017b8:	4b08      	ldr	r3, [pc, #32]	; (80017dc <SystemInit+0x5c>)
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	4a07      	ldr	r2, [pc, #28]	; (80017dc <SystemInit+0x5c>)
 80017be:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80017c2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80017c4:	4b05      	ldr	r3, [pc, #20]	; (80017dc <SystemInit+0x5c>)
 80017c6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80017ca:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80017cc:	4b05      	ldr	r3, [pc, #20]	; (80017e4 <SystemInit+0x64>)
 80017ce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80017d2:	609a      	str	r2, [r3, #8]
#endif 
}
 80017d4:	bf00      	nop
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bc80      	pop	{r7}
 80017da:	4770      	bx	lr
 80017dc:	40021000 	.word	0x40021000
 80017e0:	f8ff0000 	.word	0xf8ff0000
 80017e4:	e000ed00 	.word	0xe000ed00

080017e8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80017e8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80017ea:	e003      	b.n	80017f4 <LoopCopyDataInit>

080017ec <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80017ec:	4b0b      	ldr	r3, [pc, #44]	; (800181c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80017ee:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80017f0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80017f2:	3104      	adds	r1, #4

080017f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80017f4:	480a      	ldr	r0, [pc, #40]	; (8001820 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80017f6:	4b0b      	ldr	r3, [pc, #44]	; (8001824 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80017f8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80017fa:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80017fc:	d3f6      	bcc.n	80017ec <CopyDataInit>
  ldr r2, =_sbss
 80017fe:	4a0a      	ldr	r2, [pc, #40]	; (8001828 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001800:	e002      	b.n	8001808 <LoopFillZerobss>

08001802 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001802:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001804:	f842 3b04 	str.w	r3, [r2], #4

08001808 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001808:	4b08      	ldr	r3, [pc, #32]	; (800182c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800180a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800180c:	d3f9      	bcc.n	8001802 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800180e:	f7ff ffb7 	bl	8001780 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001812:	f000 f815 	bl	8001840 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001816:	f7ff fddb 	bl	80013d0 <main>
  bx lr
 800181a:	4770      	bx	lr
  ldr r3, =_sidata
 800181c:	08002768 	.word	0x08002768
  ldr r0, =_sdata
 8001820:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001824:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8001828:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 800182c:	200000e0 	.word	0x200000e0

08001830 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001830:	e7fe      	b.n	8001830 <ADC1_2_IRQHandler>
	...

08001834 <__errno>:
 8001834:	4b01      	ldr	r3, [pc, #4]	; (800183c <__errno+0x8>)
 8001836:	6818      	ldr	r0, [r3, #0]
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	2000000c 	.word	0x2000000c

08001840 <__libc_init_array>:
 8001840:	b570      	push	{r4, r5, r6, lr}
 8001842:	2500      	movs	r5, #0
 8001844:	4e0c      	ldr	r6, [pc, #48]	; (8001878 <__libc_init_array+0x38>)
 8001846:	4c0d      	ldr	r4, [pc, #52]	; (800187c <__libc_init_array+0x3c>)
 8001848:	1ba4      	subs	r4, r4, r6
 800184a:	10a4      	asrs	r4, r4, #2
 800184c:	42a5      	cmp	r5, r4
 800184e:	d109      	bne.n	8001864 <__libc_init_array+0x24>
 8001850:	f000 ff10 	bl	8002674 <_init>
 8001854:	2500      	movs	r5, #0
 8001856:	4e0a      	ldr	r6, [pc, #40]	; (8001880 <__libc_init_array+0x40>)
 8001858:	4c0a      	ldr	r4, [pc, #40]	; (8001884 <__libc_init_array+0x44>)
 800185a:	1ba4      	subs	r4, r4, r6
 800185c:	10a4      	asrs	r4, r4, #2
 800185e:	42a5      	cmp	r5, r4
 8001860:	d105      	bne.n	800186e <__libc_init_array+0x2e>
 8001862:	bd70      	pop	{r4, r5, r6, pc}
 8001864:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001868:	4798      	blx	r3
 800186a:	3501      	adds	r5, #1
 800186c:	e7ee      	b.n	800184c <__libc_init_array+0xc>
 800186e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001872:	4798      	blx	r3
 8001874:	3501      	adds	r5, #1
 8001876:	e7f2      	b.n	800185e <__libc_init_array+0x1e>
 8001878:	08002760 	.word	0x08002760
 800187c:	08002760 	.word	0x08002760
 8001880:	08002760 	.word	0x08002760
 8001884:	08002764 	.word	0x08002764

08001888 <memset>:
 8001888:	4603      	mov	r3, r0
 800188a:	4402      	add	r2, r0
 800188c:	4293      	cmp	r3, r2
 800188e:	d100      	bne.n	8001892 <memset+0xa>
 8001890:	4770      	bx	lr
 8001892:	f803 1b01 	strb.w	r1, [r3], #1
 8001896:	e7f9      	b.n	800188c <memset+0x4>

08001898 <iprintf>:
 8001898:	b40f      	push	{r0, r1, r2, r3}
 800189a:	4b0a      	ldr	r3, [pc, #40]	; (80018c4 <iprintf+0x2c>)
 800189c:	b513      	push	{r0, r1, r4, lr}
 800189e:	681c      	ldr	r4, [r3, #0]
 80018a0:	b124      	cbz	r4, 80018ac <iprintf+0x14>
 80018a2:	69a3      	ldr	r3, [r4, #24]
 80018a4:	b913      	cbnz	r3, 80018ac <iprintf+0x14>
 80018a6:	4620      	mov	r0, r4
 80018a8:	f000 f84e 	bl	8001948 <__sinit>
 80018ac:	ab05      	add	r3, sp, #20
 80018ae:	9a04      	ldr	r2, [sp, #16]
 80018b0:	68a1      	ldr	r1, [r4, #8]
 80018b2:	4620      	mov	r0, r4
 80018b4:	9301      	str	r3, [sp, #4]
 80018b6:	f000 f953 	bl	8001b60 <_vfiprintf_r>
 80018ba:	b002      	add	sp, #8
 80018bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80018c0:	b004      	add	sp, #16
 80018c2:	4770      	bx	lr
 80018c4:	2000000c 	.word	0x2000000c

080018c8 <std>:
 80018c8:	2300      	movs	r3, #0
 80018ca:	b510      	push	{r4, lr}
 80018cc:	4604      	mov	r4, r0
 80018ce:	e9c0 3300 	strd	r3, r3, [r0]
 80018d2:	6083      	str	r3, [r0, #8]
 80018d4:	8181      	strh	r1, [r0, #12]
 80018d6:	6643      	str	r3, [r0, #100]	; 0x64
 80018d8:	81c2      	strh	r2, [r0, #14]
 80018da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80018de:	6183      	str	r3, [r0, #24]
 80018e0:	4619      	mov	r1, r3
 80018e2:	2208      	movs	r2, #8
 80018e4:	305c      	adds	r0, #92	; 0x5c
 80018e6:	f7ff ffcf 	bl	8001888 <memset>
 80018ea:	4b05      	ldr	r3, [pc, #20]	; (8001900 <std+0x38>)
 80018ec:	6224      	str	r4, [r4, #32]
 80018ee:	6263      	str	r3, [r4, #36]	; 0x24
 80018f0:	4b04      	ldr	r3, [pc, #16]	; (8001904 <std+0x3c>)
 80018f2:	62a3      	str	r3, [r4, #40]	; 0x28
 80018f4:	4b04      	ldr	r3, [pc, #16]	; (8001908 <std+0x40>)
 80018f6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80018f8:	4b04      	ldr	r3, [pc, #16]	; (800190c <std+0x44>)
 80018fa:	6323      	str	r3, [r4, #48]	; 0x30
 80018fc:	bd10      	pop	{r4, pc}
 80018fe:	bf00      	nop
 8001900:	080020bd 	.word	0x080020bd
 8001904:	080020df 	.word	0x080020df
 8001908:	08002117 	.word	0x08002117
 800190c:	0800213b 	.word	0x0800213b

08001910 <_cleanup_r>:
 8001910:	4901      	ldr	r1, [pc, #4]	; (8001918 <_cleanup_r+0x8>)
 8001912:	f000 b885 	b.w	8001a20 <_fwalk_reent>
 8001916:	bf00      	nop
 8001918:	08002415 	.word	0x08002415

0800191c <__sfmoreglue>:
 800191c:	b570      	push	{r4, r5, r6, lr}
 800191e:	2568      	movs	r5, #104	; 0x68
 8001920:	1e4a      	subs	r2, r1, #1
 8001922:	4355      	muls	r5, r2
 8001924:	460e      	mov	r6, r1
 8001926:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800192a:	f000 f897 	bl	8001a5c <_malloc_r>
 800192e:	4604      	mov	r4, r0
 8001930:	b140      	cbz	r0, 8001944 <__sfmoreglue+0x28>
 8001932:	2100      	movs	r1, #0
 8001934:	e9c0 1600 	strd	r1, r6, [r0]
 8001938:	300c      	adds	r0, #12
 800193a:	60a0      	str	r0, [r4, #8]
 800193c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001940:	f7ff ffa2 	bl	8001888 <memset>
 8001944:	4620      	mov	r0, r4
 8001946:	bd70      	pop	{r4, r5, r6, pc}

08001948 <__sinit>:
 8001948:	6983      	ldr	r3, [r0, #24]
 800194a:	b510      	push	{r4, lr}
 800194c:	4604      	mov	r4, r0
 800194e:	bb33      	cbnz	r3, 800199e <__sinit+0x56>
 8001950:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8001954:	6503      	str	r3, [r0, #80]	; 0x50
 8001956:	4b12      	ldr	r3, [pc, #72]	; (80019a0 <__sinit+0x58>)
 8001958:	4a12      	ldr	r2, [pc, #72]	; (80019a4 <__sinit+0x5c>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	6282      	str	r2, [r0, #40]	; 0x28
 800195e:	4298      	cmp	r0, r3
 8001960:	bf04      	itt	eq
 8001962:	2301      	moveq	r3, #1
 8001964:	6183      	streq	r3, [r0, #24]
 8001966:	f000 f81f 	bl	80019a8 <__sfp>
 800196a:	6060      	str	r0, [r4, #4]
 800196c:	4620      	mov	r0, r4
 800196e:	f000 f81b 	bl	80019a8 <__sfp>
 8001972:	60a0      	str	r0, [r4, #8]
 8001974:	4620      	mov	r0, r4
 8001976:	f000 f817 	bl	80019a8 <__sfp>
 800197a:	2200      	movs	r2, #0
 800197c:	60e0      	str	r0, [r4, #12]
 800197e:	2104      	movs	r1, #4
 8001980:	6860      	ldr	r0, [r4, #4]
 8001982:	f7ff ffa1 	bl	80018c8 <std>
 8001986:	2201      	movs	r2, #1
 8001988:	2109      	movs	r1, #9
 800198a:	68a0      	ldr	r0, [r4, #8]
 800198c:	f7ff ff9c 	bl	80018c8 <std>
 8001990:	2202      	movs	r2, #2
 8001992:	2112      	movs	r1, #18
 8001994:	68e0      	ldr	r0, [r4, #12]
 8001996:	f7ff ff97 	bl	80018c8 <std>
 800199a:	2301      	movs	r3, #1
 800199c:	61a3      	str	r3, [r4, #24]
 800199e:	bd10      	pop	{r4, pc}
 80019a0:	080026c8 	.word	0x080026c8
 80019a4:	08001911 	.word	0x08001911

080019a8 <__sfp>:
 80019a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019aa:	4b1b      	ldr	r3, [pc, #108]	; (8001a18 <__sfp+0x70>)
 80019ac:	4607      	mov	r7, r0
 80019ae:	681e      	ldr	r6, [r3, #0]
 80019b0:	69b3      	ldr	r3, [r6, #24]
 80019b2:	b913      	cbnz	r3, 80019ba <__sfp+0x12>
 80019b4:	4630      	mov	r0, r6
 80019b6:	f7ff ffc7 	bl	8001948 <__sinit>
 80019ba:	3648      	adds	r6, #72	; 0x48
 80019bc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80019c0:	3b01      	subs	r3, #1
 80019c2:	d503      	bpl.n	80019cc <__sfp+0x24>
 80019c4:	6833      	ldr	r3, [r6, #0]
 80019c6:	b133      	cbz	r3, 80019d6 <__sfp+0x2e>
 80019c8:	6836      	ldr	r6, [r6, #0]
 80019ca:	e7f7      	b.n	80019bc <__sfp+0x14>
 80019cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80019d0:	b16d      	cbz	r5, 80019ee <__sfp+0x46>
 80019d2:	3468      	adds	r4, #104	; 0x68
 80019d4:	e7f4      	b.n	80019c0 <__sfp+0x18>
 80019d6:	2104      	movs	r1, #4
 80019d8:	4638      	mov	r0, r7
 80019da:	f7ff ff9f 	bl	800191c <__sfmoreglue>
 80019de:	6030      	str	r0, [r6, #0]
 80019e0:	2800      	cmp	r0, #0
 80019e2:	d1f1      	bne.n	80019c8 <__sfp+0x20>
 80019e4:	230c      	movs	r3, #12
 80019e6:	4604      	mov	r4, r0
 80019e8:	603b      	str	r3, [r7, #0]
 80019ea:	4620      	mov	r0, r4
 80019ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80019ee:	4b0b      	ldr	r3, [pc, #44]	; (8001a1c <__sfp+0x74>)
 80019f0:	6665      	str	r5, [r4, #100]	; 0x64
 80019f2:	e9c4 5500 	strd	r5, r5, [r4]
 80019f6:	60a5      	str	r5, [r4, #8]
 80019f8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80019fc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8001a00:	2208      	movs	r2, #8
 8001a02:	4629      	mov	r1, r5
 8001a04:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001a08:	f7ff ff3e 	bl	8001888 <memset>
 8001a0c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001a10:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001a14:	e7e9      	b.n	80019ea <__sfp+0x42>
 8001a16:	bf00      	nop
 8001a18:	080026c8 	.word	0x080026c8
 8001a1c:	ffff0001 	.word	0xffff0001

08001a20 <_fwalk_reent>:
 8001a20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001a24:	4680      	mov	r8, r0
 8001a26:	4689      	mov	r9, r1
 8001a28:	2600      	movs	r6, #0
 8001a2a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001a2e:	b914      	cbnz	r4, 8001a36 <_fwalk_reent+0x16>
 8001a30:	4630      	mov	r0, r6
 8001a32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001a36:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8001a3a:	3f01      	subs	r7, #1
 8001a3c:	d501      	bpl.n	8001a42 <_fwalk_reent+0x22>
 8001a3e:	6824      	ldr	r4, [r4, #0]
 8001a40:	e7f5      	b.n	8001a2e <_fwalk_reent+0xe>
 8001a42:	89ab      	ldrh	r3, [r5, #12]
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d907      	bls.n	8001a58 <_fwalk_reent+0x38>
 8001a48:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	d003      	beq.n	8001a58 <_fwalk_reent+0x38>
 8001a50:	4629      	mov	r1, r5
 8001a52:	4640      	mov	r0, r8
 8001a54:	47c8      	blx	r9
 8001a56:	4306      	orrs	r6, r0
 8001a58:	3568      	adds	r5, #104	; 0x68
 8001a5a:	e7ee      	b.n	8001a3a <_fwalk_reent+0x1a>

08001a5c <_malloc_r>:
 8001a5c:	b570      	push	{r4, r5, r6, lr}
 8001a5e:	1ccd      	adds	r5, r1, #3
 8001a60:	f025 0503 	bic.w	r5, r5, #3
 8001a64:	3508      	adds	r5, #8
 8001a66:	2d0c      	cmp	r5, #12
 8001a68:	bf38      	it	cc
 8001a6a:	250c      	movcc	r5, #12
 8001a6c:	2d00      	cmp	r5, #0
 8001a6e:	4606      	mov	r6, r0
 8001a70:	db01      	blt.n	8001a76 <_malloc_r+0x1a>
 8001a72:	42a9      	cmp	r1, r5
 8001a74:	d903      	bls.n	8001a7e <_malloc_r+0x22>
 8001a76:	230c      	movs	r3, #12
 8001a78:	6033      	str	r3, [r6, #0]
 8001a7a:	2000      	movs	r0, #0
 8001a7c:	bd70      	pop	{r4, r5, r6, pc}
 8001a7e:	f000 fd77 	bl	8002570 <__malloc_lock>
 8001a82:	4a21      	ldr	r2, [pc, #132]	; (8001b08 <_malloc_r+0xac>)
 8001a84:	6814      	ldr	r4, [r2, #0]
 8001a86:	4621      	mov	r1, r4
 8001a88:	b991      	cbnz	r1, 8001ab0 <_malloc_r+0x54>
 8001a8a:	4c20      	ldr	r4, [pc, #128]	; (8001b0c <_malloc_r+0xb0>)
 8001a8c:	6823      	ldr	r3, [r4, #0]
 8001a8e:	b91b      	cbnz	r3, 8001a98 <_malloc_r+0x3c>
 8001a90:	4630      	mov	r0, r6
 8001a92:	f000 fb03 	bl	800209c <_sbrk_r>
 8001a96:	6020      	str	r0, [r4, #0]
 8001a98:	4629      	mov	r1, r5
 8001a9a:	4630      	mov	r0, r6
 8001a9c:	f000 fafe 	bl	800209c <_sbrk_r>
 8001aa0:	1c43      	adds	r3, r0, #1
 8001aa2:	d124      	bne.n	8001aee <_malloc_r+0x92>
 8001aa4:	230c      	movs	r3, #12
 8001aa6:	4630      	mov	r0, r6
 8001aa8:	6033      	str	r3, [r6, #0]
 8001aaa:	f000 fd62 	bl	8002572 <__malloc_unlock>
 8001aae:	e7e4      	b.n	8001a7a <_malloc_r+0x1e>
 8001ab0:	680b      	ldr	r3, [r1, #0]
 8001ab2:	1b5b      	subs	r3, r3, r5
 8001ab4:	d418      	bmi.n	8001ae8 <_malloc_r+0x8c>
 8001ab6:	2b0b      	cmp	r3, #11
 8001ab8:	d90f      	bls.n	8001ada <_malloc_r+0x7e>
 8001aba:	600b      	str	r3, [r1, #0]
 8001abc:	18cc      	adds	r4, r1, r3
 8001abe:	50cd      	str	r5, [r1, r3]
 8001ac0:	4630      	mov	r0, r6
 8001ac2:	f000 fd56 	bl	8002572 <__malloc_unlock>
 8001ac6:	f104 000b 	add.w	r0, r4, #11
 8001aca:	1d23      	adds	r3, r4, #4
 8001acc:	f020 0007 	bic.w	r0, r0, #7
 8001ad0:	1ac3      	subs	r3, r0, r3
 8001ad2:	d0d3      	beq.n	8001a7c <_malloc_r+0x20>
 8001ad4:	425a      	negs	r2, r3
 8001ad6:	50e2      	str	r2, [r4, r3]
 8001ad8:	e7d0      	b.n	8001a7c <_malloc_r+0x20>
 8001ada:	684b      	ldr	r3, [r1, #4]
 8001adc:	428c      	cmp	r4, r1
 8001ade:	bf16      	itet	ne
 8001ae0:	6063      	strne	r3, [r4, #4]
 8001ae2:	6013      	streq	r3, [r2, #0]
 8001ae4:	460c      	movne	r4, r1
 8001ae6:	e7eb      	b.n	8001ac0 <_malloc_r+0x64>
 8001ae8:	460c      	mov	r4, r1
 8001aea:	6849      	ldr	r1, [r1, #4]
 8001aec:	e7cc      	b.n	8001a88 <_malloc_r+0x2c>
 8001aee:	1cc4      	adds	r4, r0, #3
 8001af0:	f024 0403 	bic.w	r4, r4, #3
 8001af4:	42a0      	cmp	r0, r4
 8001af6:	d005      	beq.n	8001b04 <_malloc_r+0xa8>
 8001af8:	1a21      	subs	r1, r4, r0
 8001afa:	4630      	mov	r0, r6
 8001afc:	f000 face 	bl	800209c <_sbrk_r>
 8001b00:	3001      	adds	r0, #1
 8001b02:	d0cf      	beq.n	8001aa4 <_malloc_r+0x48>
 8001b04:	6025      	str	r5, [r4, #0]
 8001b06:	e7db      	b.n	8001ac0 <_malloc_r+0x64>
 8001b08:	20000090 	.word	0x20000090
 8001b0c:	20000094 	.word	0x20000094

08001b10 <__sfputc_r>:
 8001b10:	6893      	ldr	r3, [r2, #8]
 8001b12:	b410      	push	{r4}
 8001b14:	3b01      	subs	r3, #1
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	6093      	str	r3, [r2, #8]
 8001b1a:	da07      	bge.n	8001b2c <__sfputc_r+0x1c>
 8001b1c:	6994      	ldr	r4, [r2, #24]
 8001b1e:	42a3      	cmp	r3, r4
 8001b20:	db01      	blt.n	8001b26 <__sfputc_r+0x16>
 8001b22:	290a      	cmp	r1, #10
 8001b24:	d102      	bne.n	8001b2c <__sfputc_r+0x1c>
 8001b26:	bc10      	pop	{r4}
 8001b28:	f000 bb0c 	b.w	8002144 <__swbuf_r>
 8001b2c:	6813      	ldr	r3, [r2, #0]
 8001b2e:	1c58      	adds	r0, r3, #1
 8001b30:	6010      	str	r0, [r2, #0]
 8001b32:	7019      	strb	r1, [r3, #0]
 8001b34:	4608      	mov	r0, r1
 8001b36:	bc10      	pop	{r4}
 8001b38:	4770      	bx	lr

08001b3a <__sfputs_r>:
 8001b3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b3c:	4606      	mov	r6, r0
 8001b3e:	460f      	mov	r7, r1
 8001b40:	4614      	mov	r4, r2
 8001b42:	18d5      	adds	r5, r2, r3
 8001b44:	42ac      	cmp	r4, r5
 8001b46:	d101      	bne.n	8001b4c <__sfputs_r+0x12>
 8001b48:	2000      	movs	r0, #0
 8001b4a:	e007      	b.n	8001b5c <__sfputs_r+0x22>
 8001b4c:	463a      	mov	r2, r7
 8001b4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001b52:	4630      	mov	r0, r6
 8001b54:	f7ff ffdc 	bl	8001b10 <__sfputc_r>
 8001b58:	1c43      	adds	r3, r0, #1
 8001b5a:	d1f3      	bne.n	8001b44 <__sfputs_r+0xa>
 8001b5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001b60 <_vfiprintf_r>:
 8001b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b64:	460c      	mov	r4, r1
 8001b66:	b09d      	sub	sp, #116	; 0x74
 8001b68:	4617      	mov	r7, r2
 8001b6a:	461d      	mov	r5, r3
 8001b6c:	4606      	mov	r6, r0
 8001b6e:	b118      	cbz	r0, 8001b78 <_vfiprintf_r+0x18>
 8001b70:	6983      	ldr	r3, [r0, #24]
 8001b72:	b90b      	cbnz	r3, 8001b78 <_vfiprintf_r+0x18>
 8001b74:	f7ff fee8 	bl	8001948 <__sinit>
 8001b78:	4b7c      	ldr	r3, [pc, #496]	; (8001d6c <_vfiprintf_r+0x20c>)
 8001b7a:	429c      	cmp	r4, r3
 8001b7c:	d158      	bne.n	8001c30 <_vfiprintf_r+0xd0>
 8001b7e:	6874      	ldr	r4, [r6, #4]
 8001b80:	89a3      	ldrh	r3, [r4, #12]
 8001b82:	0718      	lsls	r0, r3, #28
 8001b84:	d55e      	bpl.n	8001c44 <_vfiprintf_r+0xe4>
 8001b86:	6923      	ldr	r3, [r4, #16]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d05b      	beq.n	8001c44 <_vfiprintf_r+0xe4>
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	9309      	str	r3, [sp, #36]	; 0x24
 8001b90:	2320      	movs	r3, #32
 8001b92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001b96:	2330      	movs	r3, #48	; 0x30
 8001b98:	f04f 0b01 	mov.w	fp, #1
 8001b9c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001ba0:	9503      	str	r5, [sp, #12]
 8001ba2:	46b8      	mov	r8, r7
 8001ba4:	4645      	mov	r5, r8
 8001ba6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8001baa:	b10b      	cbz	r3, 8001bb0 <_vfiprintf_r+0x50>
 8001bac:	2b25      	cmp	r3, #37	; 0x25
 8001bae:	d154      	bne.n	8001c5a <_vfiprintf_r+0xfa>
 8001bb0:	ebb8 0a07 	subs.w	sl, r8, r7
 8001bb4:	d00b      	beq.n	8001bce <_vfiprintf_r+0x6e>
 8001bb6:	4653      	mov	r3, sl
 8001bb8:	463a      	mov	r2, r7
 8001bba:	4621      	mov	r1, r4
 8001bbc:	4630      	mov	r0, r6
 8001bbe:	f7ff ffbc 	bl	8001b3a <__sfputs_r>
 8001bc2:	3001      	adds	r0, #1
 8001bc4:	f000 80c2 	beq.w	8001d4c <_vfiprintf_r+0x1ec>
 8001bc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001bca:	4453      	add	r3, sl
 8001bcc:	9309      	str	r3, [sp, #36]	; 0x24
 8001bce:	f898 3000 	ldrb.w	r3, [r8]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	f000 80ba 	beq.w	8001d4c <_vfiprintf_r+0x1ec>
 8001bd8:	2300      	movs	r3, #0
 8001bda:	f04f 32ff 	mov.w	r2, #4294967295
 8001bde:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001be2:	9304      	str	r3, [sp, #16]
 8001be4:	9307      	str	r3, [sp, #28]
 8001be6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001bea:	931a      	str	r3, [sp, #104]	; 0x68
 8001bec:	46a8      	mov	r8, r5
 8001bee:	2205      	movs	r2, #5
 8001bf0:	f818 1b01 	ldrb.w	r1, [r8], #1
 8001bf4:	485e      	ldr	r0, [pc, #376]	; (8001d70 <_vfiprintf_r+0x210>)
 8001bf6:	f000 fcad 	bl	8002554 <memchr>
 8001bfa:	9b04      	ldr	r3, [sp, #16]
 8001bfc:	bb78      	cbnz	r0, 8001c5e <_vfiprintf_r+0xfe>
 8001bfe:	06d9      	lsls	r1, r3, #27
 8001c00:	bf44      	itt	mi
 8001c02:	2220      	movmi	r2, #32
 8001c04:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001c08:	071a      	lsls	r2, r3, #28
 8001c0a:	bf44      	itt	mi
 8001c0c:	222b      	movmi	r2, #43	; 0x2b
 8001c0e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001c12:	782a      	ldrb	r2, [r5, #0]
 8001c14:	2a2a      	cmp	r2, #42	; 0x2a
 8001c16:	d02a      	beq.n	8001c6e <_vfiprintf_r+0x10e>
 8001c18:	46a8      	mov	r8, r5
 8001c1a:	2000      	movs	r0, #0
 8001c1c:	250a      	movs	r5, #10
 8001c1e:	9a07      	ldr	r2, [sp, #28]
 8001c20:	4641      	mov	r1, r8
 8001c22:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001c26:	3b30      	subs	r3, #48	; 0x30
 8001c28:	2b09      	cmp	r3, #9
 8001c2a:	d969      	bls.n	8001d00 <_vfiprintf_r+0x1a0>
 8001c2c:	b360      	cbz	r0, 8001c88 <_vfiprintf_r+0x128>
 8001c2e:	e024      	b.n	8001c7a <_vfiprintf_r+0x11a>
 8001c30:	4b50      	ldr	r3, [pc, #320]	; (8001d74 <_vfiprintf_r+0x214>)
 8001c32:	429c      	cmp	r4, r3
 8001c34:	d101      	bne.n	8001c3a <_vfiprintf_r+0xda>
 8001c36:	68b4      	ldr	r4, [r6, #8]
 8001c38:	e7a2      	b.n	8001b80 <_vfiprintf_r+0x20>
 8001c3a:	4b4f      	ldr	r3, [pc, #316]	; (8001d78 <_vfiprintf_r+0x218>)
 8001c3c:	429c      	cmp	r4, r3
 8001c3e:	bf08      	it	eq
 8001c40:	68f4      	ldreq	r4, [r6, #12]
 8001c42:	e79d      	b.n	8001b80 <_vfiprintf_r+0x20>
 8001c44:	4621      	mov	r1, r4
 8001c46:	4630      	mov	r0, r6
 8001c48:	f000 fae0 	bl	800220c <__swsetup_r>
 8001c4c:	2800      	cmp	r0, #0
 8001c4e:	d09d      	beq.n	8001b8c <_vfiprintf_r+0x2c>
 8001c50:	f04f 30ff 	mov.w	r0, #4294967295
 8001c54:	b01d      	add	sp, #116	; 0x74
 8001c56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001c5a:	46a8      	mov	r8, r5
 8001c5c:	e7a2      	b.n	8001ba4 <_vfiprintf_r+0x44>
 8001c5e:	4a44      	ldr	r2, [pc, #272]	; (8001d70 <_vfiprintf_r+0x210>)
 8001c60:	4645      	mov	r5, r8
 8001c62:	1a80      	subs	r0, r0, r2
 8001c64:	fa0b f000 	lsl.w	r0, fp, r0
 8001c68:	4318      	orrs	r0, r3
 8001c6a:	9004      	str	r0, [sp, #16]
 8001c6c:	e7be      	b.n	8001bec <_vfiprintf_r+0x8c>
 8001c6e:	9a03      	ldr	r2, [sp, #12]
 8001c70:	1d11      	adds	r1, r2, #4
 8001c72:	6812      	ldr	r2, [r2, #0]
 8001c74:	9103      	str	r1, [sp, #12]
 8001c76:	2a00      	cmp	r2, #0
 8001c78:	db01      	blt.n	8001c7e <_vfiprintf_r+0x11e>
 8001c7a:	9207      	str	r2, [sp, #28]
 8001c7c:	e004      	b.n	8001c88 <_vfiprintf_r+0x128>
 8001c7e:	4252      	negs	r2, r2
 8001c80:	f043 0302 	orr.w	r3, r3, #2
 8001c84:	9207      	str	r2, [sp, #28]
 8001c86:	9304      	str	r3, [sp, #16]
 8001c88:	f898 3000 	ldrb.w	r3, [r8]
 8001c8c:	2b2e      	cmp	r3, #46	; 0x2e
 8001c8e:	d10e      	bne.n	8001cae <_vfiprintf_r+0x14e>
 8001c90:	f898 3001 	ldrb.w	r3, [r8, #1]
 8001c94:	2b2a      	cmp	r3, #42	; 0x2a
 8001c96:	d138      	bne.n	8001d0a <_vfiprintf_r+0x1aa>
 8001c98:	9b03      	ldr	r3, [sp, #12]
 8001c9a:	f108 0802 	add.w	r8, r8, #2
 8001c9e:	1d1a      	adds	r2, r3, #4
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	9203      	str	r2, [sp, #12]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	bfb8      	it	lt
 8001ca8:	f04f 33ff 	movlt.w	r3, #4294967295
 8001cac:	9305      	str	r3, [sp, #20]
 8001cae:	4d33      	ldr	r5, [pc, #204]	; (8001d7c <_vfiprintf_r+0x21c>)
 8001cb0:	2203      	movs	r2, #3
 8001cb2:	f898 1000 	ldrb.w	r1, [r8]
 8001cb6:	4628      	mov	r0, r5
 8001cb8:	f000 fc4c 	bl	8002554 <memchr>
 8001cbc:	b140      	cbz	r0, 8001cd0 <_vfiprintf_r+0x170>
 8001cbe:	2340      	movs	r3, #64	; 0x40
 8001cc0:	1b40      	subs	r0, r0, r5
 8001cc2:	fa03 f000 	lsl.w	r0, r3, r0
 8001cc6:	9b04      	ldr	r3, [sp, #16]
 8001cc8:	f108 0801 	add.w	r8, r8, #1
 8001ccc:	4303      	orrs	r3, r0
 8001cce:	9304      	str	r3, [sp, #16]
 8001cd0:	f898 1000 	ldrb.w	r1, [r8]
 8001cd4:	2206      	movs	r2, #6
 8001cd6:	482a      	ldr	r0, [pc, #168]	; (8001d80 <_vfiprintf_r+0x220>)
 8001cd8:	f108 0701 	add.w	r7, r8, #1
 8001cdc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001ce0:	f000 fc38 	bl	8002554 <memchr>
 8001ce4:	2800      	cmp	r0, #0
 8001ce6:	d037      	beq.n	8001d58 <_vfiprintf_r+0x1f8>
 8001ce8:	4b26      	ldr	r3, [pc, #152]	; (8001d84 <_vfiprintf_r+0x224>)
 8001cea:	bb1b      	cbnz	r3, 8001d34 <_vfiprintf_r+0x1d4>
 8001cec:	9b03      	ldr	r3, [sp, #12]
 8001cee:	3307      	adds	r3, #7
 8001cf0:	f023 0307 	bic.w	r3, r3, #7
 8001cf4:	3308      	adds	r3, #8
 8001cf6:	9303      	str	r3, [sp, #12]
 8001cf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001cfa:	444b      	add	r3, r9
 8001cfc:	9309      	str	r3, [sp, #36]	; 0x24
 8001cfe:	e750      	b.n	8001ba2 <_vfiprintf_r+0x42>
 8001d00:	fb05 3202 	mla	r2, r5, r2, r3
 8001d04:	2001      	movs	r0, #1
 8001d06:	4688      	mov	r8, r1
 8001d08:	e78a      	b.n	8001c20 <_vfiprintf_r+0xc0>
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	250a      	movs	r5, #10
 8001d0e:	4619      	mov	r1, r3
 8001d10:	f108 0801 	add.w	r8, r8, #1
 8001d14:	9305      	str	r3, [sp, #20]
 8001d16:	4640      	mov	r0, r8
 8001d18:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001d1c:	3a30      	subs	r2, #48	; 0x30
 8001d1e:	2a09      	cmp	r2, #9
 8001d20:	d903      	bls.n	8001d2a <_vfiprintf_r+0x1ca>
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d0c3      	beq.n	8001cae <_vfiprintf_r+0x14e>
 8001d26:	9105      	str	r1, [sp, #20]
 8001d28:	e7c1      	b.n	8001cae <_vfiprintf_r+0x14e>
 8001d2a:	fb05 2101 	mla	r1, r5, r1, r2
 8001d2e:	2301      	movs	r3, #1
 8001d30:	4680      	mov	r8, r0
 8001d32:	e7f0      	b.n	8001d16 <_vfiprintf_r+0x1b6>
 8001d34:	ab03      	add	r3, sp, #12
 8001d36:	9300      	str	r3, [sp, #0]
 8001d38:	4622      	mov	r2, r4
 8001d3a:	4b13      	ldr	r3, [pc, #76]	; (8001d88 <_vfiprintf_r+0x228>)
 8001d3c:	a904      	add	r1, sp, #16
 8001d3e:	4630      	mov	r0, r6
 8001d40:	f3af 8000 	nop.w
 8001d44:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001d48:	4681      	mov	r9, r0
 8001d4a:	d1d5      	bne.n	8001cf8 <_vfiprintf_r+0x198>
 8001d4c:	89a3      	ldrh	r3, [r4, #12]
 8001d4e:	065b      	lsls	r3, r3, #25
 8001d50:	f53f af7e 	bmi.w	8001c50 <_vfiprintf_r+0xf0>
 8001d54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001d56:	e77d      	b.n	8001c54 <_vfiprintf_r+0xf4>
 8001d58:	ab03      	add	r3, sp, #12
 8001d5a:	9300      	str	r3, [sp, #0]
 8001d5c:	4622      	mov	r2, r4
 8001d5e:	4b0a      	ldr	r3, [pc, #40]	; (8001d88 <_vfiprintf_r+0x228>)
 8001d60:	a904      	add	r1, sp, #16
 8001d62:	4630      	mov	r0, r6
 8001d64:	f000 f888 	bl	8001e78 <_printf_i>
 8001d68:	e7ec      	b.n	8001d44 <_vfiprintf_r+0x1e4>
 8001d6a:	bf00      	nop
 8001d6c:	080026ec 	.word	0x080026ec
 8001d70:	0800272c 	.word	0x0800272c
 8001d74:	0800270c 	.word	0x0800270c
 8001d78:	080026cc 	.word	0x080026cc
 8001d7c:	08002732 	.word	0x08002732
 8001d80:	08002736 	.word	0x08002736
 8001d84:	00000000 	.word	0x00000000
 8001d88:	08001b3b 	.word	0x08001b3b

08001d8c <_printf_common>:
 8001d8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001d90:	4691      	mov	r9, r2
 8001d92:	461f      	mov	r7, r3
 8001d94:	688a      	ldr	r2, [r1, #8]
 8001d96:	690b      	ldr	r3, [r1, #16]
 8001d98:	4606      	mov	r6, r0
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	bfb8      	it	lt
 8001d9e:	4613      	movlt	r3, r2
 8001da0:	f8c9 3000 	str.w	r3, [r9]
 8001da4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001da8:	460c      	mov	r4, r1
 8001daa:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001dae:	b112      	cbz	r2, 8001db6 <_printf_common+0x2a>
 8001db0:	3301      	adds	r3, #1
 8001db2:	f8c9 3000 	str.w	r3, [r9]
 8001db6:	6823      	ldr	r3, [r4, #0]
 8001db8:	0699      	lsls	r1, r3, #26
 8001dba:	bf42      	ittt	mi
 8001dbc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8001dc0:	3302      	addmi	r3, #2
 8001dc2:	f8c9 3000 	strmi.w	r3, [r9]
 8001dc6:	6825      	ldr	r5, [r4, #0]
 8001dc8:	f015 0506 	ands.w	r5, r5, #6
 8001dcc:	d107      	bne.n	8001dde <_printf_common+0x52>
 8001dce:	f104 0a19 	add.w	sl, r4, #25
 8001dd2:	68e3      	ldr	r3, [r4, #12]
 8001dd4:	f8d9 2000 	ldr.w	r2, [r9]
 8001dd8:	1a9b      	subs	r3, r3, r2
 8001dda:	42ab      	cmp	r3, r5
 8001ddc:	dc29      	bgt.n	8001e32 <_printf_common+0xa6>
 8001dde:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001de2:	6822      	ldr	r2, [r4, #0]
 8001de4:	3300      	adds	r3, #0
 8001de6:	bf18      	it	ne
 8001de8:	2301      	movne	r3, #1
 8001dea:	0692      	lsls	r2, r2, #26
 8001dec:	d42e      	bmi.n	8001e4c <_printf_common+0xc0>
 8001dee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001df2:	4639      	mov	r1, r7
 8001df4:	4630      	mov	r0, r6
 8001df6:	47c0      	blx	r8
 8001df8:	3001      	adds	r0, #1
 8001dfa:	d021      	beq.n	8001e40 <_printf_common+0xb4>
 8001dfc:	6823      	ldr	r3, [r4, #0]
 8001dfe:	68e5      	ldr	r5, [r4, #12]
 8001e00:	f003 0306 	and.w	r3, r3, #6
 8001e04:	2b04      	cmp	r3, #4
 8001e06:	bf18      	it	ne
 8001e08:	2500      	movne	r5, #0
 8001e0a:	f8d9 2000 	ldr.w	r2, [r9]
 8001e0e:	f04f 0900 	mov.w	r9, #0
 8001e12:	bf08      	it	eq
 8001e14:	1aad      	subeq	r5, r5, r2
 8001e16:	68a3      	ldr	r3, [r4, #8]
 8001e18:	6922      	ldr	r2, [r4, #16]
 8001e1a:	bf08      	it	eq
 8001e1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001e20:	4293      	cmp	r3, r2
 8001e22:	bfc4      	itt	gt
 8001e24:	1a9b      	subgt	r3, r3, r2
 8001e26:	18ed      	addgt	r5, r5, r3
 8001e28:	341a      	adds	r4, #26
 8001e2a:	454d      	cmp	r5, r9
 8001e2c:	d11a      	bne.n	8001e64 <_printf_common+0xd8>
 8001e2e:	2000      	movs	r0, #0
 8001e30:	e008      	b.n	8001e44 <_printf_common+0xb8>
 8001e32:	2301      	movs	r3, #1
 8001e34:	4652      	mov	r2, sl
 8001e36:	4639      	mov	r1, r7
 8001e38:	4630      	mov	r0, r6
 8001e3a:	47c0      	blx	r8
 8001e3c:	3001      	adds	r0, #1
 8001e3e:	d103      	bne.n	8001e48 <_printf_common+0xbc>
 8001e40:	f04f 30ff 	mov.w	r0, #4294967295
 8001e44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001e48:	3501      	adds	r5, #1
 8001e4a:	e7c2      	b.n	8001dd2 <_printf_common+0x46>
 8001e4c:	2030      	movs	r0, #48	; 0x30
 8001e4e:	18e1      	adds	r1, r4, r3
 8001e50:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001e54:	1c5a      	adds	r2, r3, #1
 8001e56:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001e5a:	4422      	add	r2, r4
 8001e5c:	3302      	adds	r3, #2
 8001e5e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001e62:	e7c4      	b.n	8001dee <_printf_common+0x62>
 8001e64:	2301      	movs	r3, #1
 8001e66:	4622      	mov	r2, r4
 8001e68:	4639      	mov	r1, r7
 8001e6a:	4630      	mov	r0, r6
 8001e6c:	47c0      	blx	r8
 8001e6e:	3001      	adds	r0, #1
 8001e70:	d0e6      	beq.n	8001e40 <_printf_common+0xb4>
 8001e72:	f109 0901 	add.w	r9, r9, #1
 8001e76:	e7d8      	b.n	8001e2a <_printf_common+0x9e>

08001e78 <_printf_i>:
 8001e78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001e7c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8001e80:	460c      	mov	r4, r1
 8001e82:	7e09      	ldrb	r1, [r1, #24]
 8001e84:	b085      	sub	sp, #20
 8001e86:	296e      	cmp	r1, #110	; 0x6e
 8001e88:	4617      	mov	r7, r2
 8001e8a:	4606      	mov	r6, r0
 8001e8c:	4698      	mov	r8, r3
 8001e8e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001e90:	f000 80b3 	beq.w	8001ffa <_printf_i+0x182>
 8001e94:	d822      	bhi.n	8001edc <_printf_i+0x64>
 8001e96:	2963      	cmp	r1, #99	; 0x63
 8001e98:	d036      	beq.n	8001f08 <_printf_i+0x90>
 8001e9a:	d80a      	bhi.n	8001eb2 <_printf_i+0x3a>
 8001e9c:	2900      	cmp	r1, #0
 8001e9e:	f000 80b9 	beq.w	8002014 <_printf_i+0x19c>
 8001ea2:	2958      	cmp	r1, #88	; 0x58
 8001ea4:	f000 8083 	beq.w	8001fae <_printf_i+0x136>
 8001ea8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001eac:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8001eb0:	e032      	b.n	8001f18 <_printf_i+0xa0>
 8001eb2:	2964      	cmp	r1, #100	; 0x64
 8001eb4:	d001      	beq.n	8001eba <_printf_i+0x42>
 8001eb6:	2969      	cmp	r1, #105	; 0x69
 8001eb8:	d1f6      	bne.n	8001ea8 <_printf_i+0x30>
 8001eba:	6820      	ldr	r0, [r4, #0]
 8001ebc:	6813      	ldr	r3, [r2, #0]
 8001ebe:	0605      	lsls	r5, r0, #24
 8001ec0:	f103 0104 	add.w	r1, r3, #4
 8001ec4:	d52a      	bpl.n	8001f1c <_printf_i+0xa4>
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	6011      	str	r1, [r2, #0]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	da03      	bge.n	8001ed6 <_printf_i+0x5e>
 8001ece:	222d      	movs	r2, #45	; 0x2d
 8001ed0:	425b      	negs	r3, r3
 8001ed2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8001ed6:	486f      	ldr	r0, [pc, #444]	; (8002094 <_printf_i+0x21c>)
 8001ed8:	220a      	movs	r2, #10
 8001eda:	e039      	b.n	8001f50 <_printf_i+0xd8>
 8001edc:	2973      	cmp	r1, #115	; 0x73
 8001ede:	f000 809d 	beq.w	800201c <_printf_i+0x1a4>
 8001ee2:	d808      	bhi.n	8001ef6 <_printf_i+0x7e>
 8001ee4:	296f      	cmp	r1, #111	; 0x6f
 8001ee6:	d020      	beq.n	8001f2a <_printf_i+0xb2>
 8001ee8:	2970      	cmp	r1, #112	; 0x70
 8001eea:	d1dd      	bne.n	8001ea8 <_printf_i+0x30>
 8001eec:	6823      	ldr	r3, [r4, #0]
 8001eee:	f043 0320 	orr.w	r3, r3, #32
 8001ef2:	6023      	str	r3, [r4, #0]
 8001ef4:	e003      	b.n	8001efe <_printf_i+0x86>
 8001ef6:	2975      	cmp	r1, #117	; 0x75
 8001ef8:	d017      	beq.n	8001f2a <_printf_i+0xb2>
 8001efa:	2978      	cmp	r1, #120	; 0x78
 8001efc:	d1d4      	bne.n	8001ea8 <_printf_i+0x30>
 8001efe:	2378      	movs	r3, #120	; 0x78
 8001f00:	4865      	ldr	r0, [pc, #404]	; (8002098 <_printf_i+0x220>)
 8001f02:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001f06:	e055      	b.n	8001fb4 <_printf_i+0x13c>
 8001f08:	6813      	ldr	r3, [r2, #0]
 8001f0a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001f0e:	1d19      	adds	r1, r3, #4
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	6011      	str	r1, [r2, #0]
 8001f14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e08c      	b.n	8002036 <_printf_i+0x1be>
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001f22:	6011      	str	r1, [r2, #0]
 8001f24:	bf18      	it	ne
 8001f26:	b21b      	sxthne	r3, r3
 8001f28:	e7cf      	b.n	8001eca <_printf_i+0x52>
 8001f2a:	6813      	ldr	r3, [r2, #0]
 8001f2c:	6825      	ldr	r5, [r4, #0]
 8001f2e:	1d18      	adds	r0, r3, #4
 8001f30:	6010      	str	r0, [r2, #0]
 8001f32:	0628      	lsls	r0, r5, #24
 8001f34:	d501      	bpl.n	8001f3a <_printf_i+0xc2>
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	e002      	b.n	8001f40 <_printf_i+0xc8>
 8001f3a:	0668      	lsls	r0, r5, #25
 8001f3c:	d5fb      	bpl.n	8001f36 <_printf_i+0xbe>
 8001f3e:	881b      	ldrh	r3, [r3, #0]
 8001f40:	296f      	cmp	r1, #111	; 0x6f
 8001f42:	bf14      	ite	ne
 8001f44:	220a      	movne	r2, #10
 8001f46:	2208      	moveq	r2, #8
 8001f48:	4852      	ldr	r0, [pc, #328]	; (8002094 <_printf_i+0x21c>)
 8001f4a:	2100      	movs	r1, #0
 8001f4c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001f50:	6865      	ldr	r5, [r4, #4]
 8001f52:	2d00      	cmp	r5, #0
 8001f54:	60a5      	str	r5, [r4, #8]
 8001f56:	f2c0 8095 	blt.w	8002084 <_printf_i+0x20c>
 8001f5a:	6821      	ldr	r1, [r4, #0]
 8001f5c:	f021 0104 	bic.w	r1, r1, #4
 8001f60:	6021      	str	r1, [r4, #0]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d13d      	bne.n	8001fe2 <_printf_i+0x16a>
 8001f66:	2d00      	cmp	r5, #0
 8001f68:	f040 808e 	bne.w	8002088 <_printf_i+0x210>
 8001f6c:	4665      	mov	r5, ip
 8001f6e:	2a08      	cmp	r2, #8
 8001f70:	d10b      	bne.n	8001f8a <_printf_i+0x112>
 8001f72:	6823      	ldr	r3, [r4, #0]
 8001f74:	07db      	lsls	r3, r3, #31
 8001f76:	d508      	bpl.n	8001f8a <_printf_i+0x112>
 8001f78:	6923      	ldr	r3, [r4, #16]
 8001f7a:	6862      	ldr	r2, [r4, #4]
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	bfde      	ittt	le
 8001f80:	2330      	movle	r3, #48	; 0x30
 8001f82:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001f86:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001f8a:	ebac 0305 	sub.w	r3, ip, r5
 8001f8e:	6123      	str	r3, [r4, #16]
 8001f90:	f8cd 8000 	str.w	r8, [sp]
 8001f94:	463b      	mov	r3, r7
 8001f96:	aa03      	add	r2, sp, #12
 8001f98:	4621      	mov	r1, r4
 8001f9a:	4630      	mov	r0, r6
 8001f9c:	f7ff fef6 	bl	8001d8c <_printf_common>
 8001fa0:	3001      	adds	r0, #1
 8001fa2:	d14d      	bne.n	8002040 <_printf_i+0x1c8>
 8001fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8001fa8:	b005      	add	sp, #20
 8001faa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001fae:	4839      	ldr	r0, [pc, #228]	; (8002094 <_printf_i+0x21c>)
 8001fb0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8001fb4:	6813      	ldr	r3, [r2, #0]
 8001fb6:	6821      	ldr	r1, [r4, #0]
 8001fb8:	1d1d      	adds	r5, r3, #4
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	6015      	str	r5, [r2, #0]
 8001fbe:	060a      	lsls	r2, r1, #24
 8001fc0:	d50b      	bpl.n	8001fda <_printf_i+0x162>
 8001fc2:	07ca      	lsls	r2, r1, #31
 8001fc4:	bf44      	itt	mi
 8001fc6:	f041 0120 	orrmi.w	r1, r1, #32
 8001fca:	6021      	strmi	r1, [r4, #0]
 8001fcc:	b91b      	cbnz	r3, 8001fd6 <_printf_i+0x15e>
 8001fce:	6822      	ldr	r2, [r4, #0]
 8001fd0:	f022 0220 	bic.w	r2, r2, #32
 8001fd4:	6022      	str	r2, [r4, #0]
 8001fd6:	2210      	movs	r2, #16
 8001fd8:	e7b7      	b.n	8001f4a <_printf_i+0xd2>
 8001fda:	064d      	lsls	r5, r1, #25
 8001fdc:	bf48      	it	mi
 8001fde:	b29b      	uxthmi	r3, r3
 8001fe0:	e7ef      	b.n	8001fc2 <_printf_i+0x14a>
 8001fe2:	4665      	mov	r5, ip
 8001fe4:	fbb3 f1f2 	udiv	r1, r3, r2
 8001fe8:	fb02 3311 	mls	r3, r2, r1, r3
 8001fec:	5cc3      	ldrb	r3, [r0, r3]
 8001fee:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8001ff2:	460b      	mov	r3, r1
 8001ff4:	2900      	cmp	r1, #0
 8001ff6:	d1f5      	bne.n	8001fe4 <_printf_i+0x16c>
 8001ff8:	e7b9      	b.n	8001f6e <_printf_i+0xf6>
 8001ffa:	6813      	ldr	r3, [r2, #0]
 8001ffc:	6825      	ldr	r5, [r4, #0]
 8001ffe:	1d18      	adds	r0, r3, #4
 8002000:	6961      	ldr	r1, [r4, #20]
 8002002:	6010      	str	r0, [r2, #0]
 8002004:	0628      	lsls	r0, r5, #24
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	d501      	bpl.n	800200e <_printf_i+0x196>
 800200a:	6019      	str	r1, [r3, #0]
 800200c:	e002      	b.n	8002014 <_printf_i+0x19c>
 800200e:	066a      	lsls	r2, r5, #25
 8002010:	d5fb      	bpl.n	800200a <_printf_i+0x192>
 8002012:	8019      	strh	r1, [r3, #0]
 8002014:	2300      	movs	r3, #0
 8002016:	4665      	mov	r5, ip
 8002018:	6123      	str	r3, [r4, #16]
 800201a:	e7b9      	b.n	8001f90 <_printf_i+0x118>
 800201c:	6813      	ldr	r3, [r2, #0]
 800201e:	1d19      	adds	r1, r3, #4
 8002020:	6011      	str	r1, [r2, #0]
 8002022:	681d      	ldr	r5, [r3, #0]
 8002024:	6862      	ldr	r2, [r4, #4]
 8002026:	2100      	movs	r1, #0
 8002028:	4628      	mov	r0, r5
 800202a:	f000 fa93 	bl	8002554 <memchr>
 800202e:	b108      	cbz	r0, 8002034 <_printf_i+0x1bc>
 8002030:	1b40      	subs	r0, r0, r5
 8002032:	6060      	str	r0, [r4, #4]
 8002034:	6863      	ldr	r3, [r4, #4]
 8002036:	6123      	str	r3, [r4, #16]
 8002038:	2300      	movs	r3, #0
 800203a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800203e:	e7a7      	b.n	8001f90 <_printf_i+0x118>
 8002040:	6923      	ldr	r3, [r4, #16]
 8002042:	462a      	mov	r2, r5
 8002044:	4639      	mov	r1, r7
 8002046:	4630      	mov	r0, r6
 8002048:	47c0      	blx	r8
 800204a:	3001      	adds	r0, #1
 800204c:	d0aa      	beq.n	8001fa4 <_printf_i+0x12c>
 800204e:	6823      	ldr	r3, [r4, #0]
 8002050:	079b      	lsls	r3, r3, #30
 8002052:	d413      	bmi.n	800207c <_printf_i+0x204>
 8002054:	68e0      	ldr	r0, [r4, #12]
 8002056:	9b03      	ldr	r3, [sp, #12]
 8002058:	4298      	cmp	r0, r3
 800205a:	bfb8      	it	lt
 800205c:	4618      	movlt	r0, r3
 800205e:	e7a3      	b.n	8001fa8 <_printf_i+0x130>
 8002060:	2301      	movs	r3, #1
 8002062:	464a      	mov	r2, r9
 8002064:	4639      	mov	r1, r7
 8002066:	4630      	mov	r0, r6
 8002068:	47c0      	blx	r8
 800206a:	3001      	adds	r0, #1
 800206c:	d09a      	beq.n	8001fa4 <_printf_i+0x12c>
 800206e:	3501      	adds	r5, #1
 8002070:	68e3      	ldr	r3, [r4, #12]
 8002072:	9a03      	ldr	r2, [sp, #12]
 8002074:	1a9b      	subs	r3, r3, r2
 8002076:	42ab      	cmp	r3, r5
 8002078:	dcf2      	bgt.n	8002060 <_printf_i+0x1e8>
 800207a:	e7eb      	b.n	8002054 <_printf_i+0x1dc>
 800207c:	2500      	movs	r5, #0
 800207e:	f104 0919 	add.w	r9, r4, #25
 8002082:	e7f5      	b.n	8002070 <_printf_i+0x1f8>
 8002084:	2b00      	cmp	r3, #0
 8002086:	d1ac      	bne.n	8001fe2 <_printf_i+0x16a>
 8002088:	7803      	ldrb	r3, [r0, #0]
 800208a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800208e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002092:	e76c      	b.n	8001f6e <_printf_i+0xf6>
 8002094:	0800273d 	.word	0x0800273d
 8002098:	0800274e 	.word	0x0800274e

0800209c <_sbrk_r>:
 800209c:	b538      	push	{r3, r4, r5, lr}
 800209e:	2300      	movs	r3, #0
 80020a0:	4c05      	ldr	r4, [pc, #20]	; (80020b8 <_sbrk_r+0x1c>)
 80020a2:	4605      	mov	r5, r0
 80020a4:	4608      	mov	r0, r1
 80020a6:	6023      	str	r3, [r4, #0]
 80020a8:	f7ff fb3e 	bl	8001728 <_sbrk>
 80020ac:	1c43      	adds	r3, r0, #1
 80020ae:	d102      	bne.n	80020b6 <_sbrk_r+0x1a>
 80020b0:	6823      	ldr	r3, [r4, #0]
 80020b2:	b103      	cbz	r3, 80020b6 <_sbrk_r+0x1a>
 80020b4:	602b      	str	r3, [r5, #0]
 80020b6:	bd38      	pop	{r3, r4, r5, pc}
 80020b8:	200000dc 	.word	0x200000dc

080020bc <__sread>:
 80020bc:	b510      	push	{r4, lr}
 80020be:	460c      	mov	r4, r1
 80020c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80020c4:	f000 faa2 	bl	800260c <_read_r>
 80020c8:	2800      	cmp	r0, #0
 80020ca:	bfab      	itete	ge
 80020cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80020ce:	89a3      	ldrhlt	r3, [r4, #12]
 80020d0:	181b      	addge	r3, r3, r0
 80020d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80020d6:	bfac      	ite	ge
 80020d8:	6563      	strge	r3, [r4, #84]	; 0x54
 80020da:	81a3      	strhlt	r3, [r4, #12]
 80020dc:	bd10      	pop	{r4, pc}

080020de <__swrite>:
 80020de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80020e2:	461f      	mov	r7, r3
 80020e4:	898b      	ldrh	r3, [r1, #12]
 80020e6:	4605      	mov	r5, r0
 80020e8:	05db      	lsls	r3, r3, #23
 80020ea:	460c      	mov	r4, r1
 80020ec:	4616      	mov	r6, r2
 80020ee:	d505      	bpl.n	80020fc <__swrite+0x1e>
 80020f0:	2302      	movs	r3, #2
 80020f2:	2200      	movs	r2, #0
 80020f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80020f8:	f000 f9b6 	bl	8002468 <_lseek_r>
 80020fc:	89a3      	ldrh	r3, [r4, #12]
 80020fe:	4632      	mov	r2, r6
 8002100:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002104:	81a3      	strh	r3, [r4, #12]
 8002106:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800210a:	463b      	mov	r3, r7
 800210c:	4628      	mov	r0, r5
 800210e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002112:	f000 b869 	b.w	80021e8 <_write_r>

08002116 <__sseek>:
 8002116:	b510      	push	{r4, lr}
 8002118:	460c      	mov	r4, r1
 800211a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800211e:	f000 f9a3 	bl	8002468 <_lseek_r>
 8002122:	1c43      	adds	r3, r0, #1
 8002124:	89a3      	ldrh	r3, [r4, #12]
 8002126:	bf15      	itete	ne
 8002128:	6560      	strne	r0, [r4, #84]	; 0x54
 800212a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800212e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002132:	81a3      	strheq	r3, [r4, #12]
 8002134:	bf18      	it	ne
 8002136:	81a3      	strhne	r3, [r4, #12]
 8002138:	bd10      	pop	{r4, pc}

0800213a <__sclose>:
 800213a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800213e:	f000 b8d3 	b.w	80022e8 <_close_r>
	...

08002144 <__swbuf_r>:
 8002144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002146:	460e      	mov	r6, r1
 8002148:	4614      	mov	r4, r2
 800214a:	4605      	mov	r5, r0
 800214c:	b118      	cbz	r0, 8002156 <__swbuf_r+0x12>
 800214e:	6983      	ldr	r3, [r0, #24]
 8002150:	b90b      	cbnz	r3, 8002156 <__swbuf_r+0x12>
 8002152:	f7ff fbf9 	bl	8001948 <__sinit>
 8002156:	4b21      	ldr	r3, [pc, #132]	; (80021dc <__swbuf_r+0x98>)
 8002158:	429c      	cmp	r4, r3
 800215a:	d12a      	bne.n	80021b2 <__swbuf_r+0x6e>
 800215c:	686c      	ldr	r4, [r5, #4]
 800215e:	69a3      	ldr	r3, [r4, #24]
 8002160:	60a3      	str	r3, [r4, #8]
 8002162:	89a3      	ldrh	r3, [r4, #12]
 8002164:	071a      	lsls	r2, r3, #28
 8002166:	d52e      	bpl.n	80021c6 <__swbuf_r+0x82>
 8002168:	6923      	ldr	r3, [r4, #16]
 800216a:	b363      	cbz	r3, 80021c6 <__swbuf_r+0x82>
 800216c:	6923      	ldr	r3, [r4, #16]
 800216e:	6820      	ldr	r0, [r4, #0]
 8002170:	b2f6      	uxtb	r6, r6
 8002172:	1ac0      	subs	r0, r0, r3
 8002174:	6963      	ldr	r3, [r4, #20]
 8002176:	4637      	mov	r7, r6
 8002178:	4283      	cmp	r3, r0
 800217a:	dc04      	bgt.n	8002186 <__swbuf_r+0x42>
 800217c:	4621      	mov	r1, r4
 800217e:	4628      	mov	r0, r5
 8002180:	f000 f948 	bl	8002414 <_fflush_r>
 8002184:	bb28      	cbnz	r0, 80021d2 <__swbuf_r+0x8e>
 8002186:	68a3      	ldr	r3, [r4, #8]
 8002188:	3001      	adds	r0, #1
 800218a:	3b01      	subs	r3, #1
 800218c:	60a3      	str	r3, [r4, #8]
 800218e:	6823      	ldr	r3, [r4, #0]
 8002190:	1c5a      	adds	r2, r3, #1
 8002192:	6022      	str	r2, [r4, #0]
 8002194:	701e      	strb	r6, [r3, #0]
 8002196:	6963      	ldr	r3, [r4, #20]
 8002198:	4283      	cmp	r3, r0
 800219a:	d004      	beq.n	80021a6 <__swbuf_r+0x62>
 800219c:	89a3      	ldrh	r3, [r4, #12]
 800219e:	07db      	lsls	r3, r3, #31
 80021a0:	d519      	bpl.n	80021d6 <__swbuf_r+0x92>
 80021a2:	2e0a      	cmp	r6, #10
 80021a4:	d117      	bne.n	80021d6 <__swbuf_r+0x92>
 80021a6:	4621      	mov	r1, r4
 80021a8:	4628      	mov	r0, r5
 80021aa:	f000 f933 	bl	8002414 <_fflush_r>
 80021ae:	b190      	cbz	r0, 80021d6 <__swbuf_r+0x92>
 80021b0:	e00f      	b.n	80021d2 <__swbuf_r+0x8e>
 80021b2:	4b0b      	ldr	r3, [pc, #44]	; (80021e0 <__swbuf_r+0x9c>)
 80021b4:	429c      	cmp	r4, r3
 80021b6:	d101      	bne.n	80021bc <__swbuf_r+0x78>
 80021b8:	68ac      	ldr	r4, [r5, #8]
 80021ba:	e7d0      	b.n	800215e <__swbuf_r+0x1a>
 80021bc:	4b09      	ldr	r3, [pc, #36]	; (80021e4 <__swbuf_r+0xa0>)
 80021be:	429c      	cmp	r4, r3
 80021c0:	bf08      	it	eq
 80021c2:	68ec      	ldreq	r4, [r5, #12]
 80021c4:	e7cb      	b.n	800215e <__swbuf_r+0x1a>
 80021c6:	4621      	mov	r1, r4
 80021c8:	4628      	mov	r0, r5
 80021ca:	f000 f81f 	bl	800220c <__swsetup_r>
 80021ce:	2800      	cmp	r0, #0
 80021d0:	d0cc      	beq.n	800216c <__swbuf_r+0x28>
 80021d2:	f04f 37ff 	mov.w	r7, #4294967295
 80021d6:	4638      	mov	r0, r7
 80021d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80021da:	bf00      	nop
 80021dc:	080026ec 	.word	0x080026ec
 80021e0:	0800270c 	.word	0x0800270c
 80021e4:	080026cc 	.word	0x080026cc

080021e8 <_write_r>:
 80021e8:	b538      	push	{r3, r4, r5, lr}
 80021ea:	4605      	mov	r5, r0
 80021ec:	4608      	mov	r0, r1
 80021ee:	4611      	mov	r1, r2
 80021f0:	2200      	movs	r2, #0
 80021f2:	4c05      	ldr	r4, [pc, #20]	; (8002208 <_write_r+0x20>)
 80021f4:	6022      	str	r2, [r4, #0]
 80021f6:	461a      	mov	r2, r3
 80021f8:	f7ff fa49 	bl	800168e <_write>
 80021fc:	1c43      	adds	r3, r0, #1
 80021fe:	d102      	bne.n	8002206 <_write_r+0x1e>
 8002200:	6823      	ldr	r3, [r4, #0]
 8002202:	b103      	cbz	r3, 8002206 <_write_r+0x1e>
 8002204:	602b      	str	r3, [r5, #0]
 8002206:	bd38      	pop	{r3, r4, r5, pc}
 8002208:	200000dc 	.word	0x200000dc

0800220c <__swsetup_r>:
 800220c:	4b32      	ldr	r3, [pc, #200]	; (80022d8 <__swsetup_r+0xcc>)
 800220e:	b570      	push	{r4, r5, r6, lr}
 8002210:	681d      	ldr	r5, [r3, #0]
 8002212:	4606      	mov	r6, r0
 8002214:	460c      	mov	r4, r1
 8002216:	b125      	cbz	r5, 8002222 <__swsetup_r+0x16>
 8002218:	69ab      	ldr	r3, [r5, #24]
 800221a:	b913      	cbnz	r3, 8002222 <__swsetup_r+0x16>
 800221c:	4628      	mov	r0, r5
 800221e:	f7ff fb93 	bl	8001948 <__sinit>
 8002222:	4b2e      	ldr	r3, [pc, #184]	; (80022dc <__swsetup_r+0xd0>)
 8002224:	429c      	cmp	r4, r3
 8002226:	d10f      	bne.n	8002248 <__swsetup_r+0x3c>
 8002228:	686c      	ldr	r4, [r5, #4]
 800222a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800222e:	b29a      	uxth	r2, r3
 8002230:	0715      	lsls	r5, r2, #28
 8002232:	d42c      	bmi.n	800228e <__swsetup_r+0x82>
 8002234:	06d0      	lsls	r0, r2, #27
 8002236:	d411      	bmi.n	800225c <__swsetup_r+0x50>
 8002238:	2209      	movs	r2, #9
 800223a:	6032      	str	r2, [r6, #0]
 800223c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002240:	81a3      	strh	r3, [r4, #12]
 8002242:	f04f 30ff 	mov.w	r0, #4294967295
 8002246:	e03e      	b.n	80022c6 <__swsetup_r+0xba>
 8002248:	4b25      	ldr	r3, [pc, #148]	; (80022e0 <__swsetup_r+0xd4>)
 800224a:	429c      	cmp	r4, r3
 800224c:	d101      	bne.n	8002252 <__swsetup_r+0x46>
 800224e:	68ac      	ldr	r4, [r5, #8]
 8002250:	e7eb      	b.n	800222a <__swsetup_r+0x1e>
 8002252:	4b24      	ldr	r3, [pc, #144]	; (80022e4 <__swsetup_r+0xd8>)
 8002254:	429c      	cmp	r4, r3
 8002256:	bf08      	it	eq
 8002258:	68ec      	ldreq	r4, [r5, #12]
 800225a:	e7e6      	b.n	800222a <__swsetup_r+0x1e>
 800225c:	0751      	lsls	r1, r2, #29
 800225e:	d512      	bpl.n	8002286 <__swsetup_r+0x7a>
 8002260:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002262:	b141      	cbz	r1, 8002276 <__swsetup_r+0x6a>
 8002264:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002268:	4299      	cmp	r1, r3
 800226a:	d002      	beq.n	8002272 <__swsetup_r+0x66>
 800226c:	4630      	mov	r0, r6
 800226e:	f000 f981 	bl	8002574 <_free_r>
 8002272:	2300      	movs	r3, #0
 8002274:	6363      	str	r3, [r4, #52]	; 0x34
 8002276:	89a3      	ldrh	r3, [r4, #12]
 8002278:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800227c:	81a3      	strh	r3, [r4, #12]
 800227e:	2300      	movs	r3, #0
 8002280:	6063      	str	r3, [r4, #4]
 8002282:	6923      	ldr	r3, [r4, #16]
 8002284:	6023      	str	r3, [r4, #0]
 8002286:	89a3      	ldrh	r3, [r4, #12]
 8002288:	f043 0308 	orr.w	r3, r3, #8
 800228c:	81a3      	strh	r3, [r4, #12]
 800228e:	6923      	ldr	r3, [r4, #16]
 8002290:	b94b      	cbnz	r3, 80022a6 <__swsetup_r+0x9a>
 8002292:	89a3      	ldrh	r3, [r4, #12]
 8002294:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002298:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800229c:	d003      	beq.n	80022a6 <__swsetup_r+0x9a>
 800229e:	4621      	mov	r1, r4
 80022a0:	4630      	mov	r0, r6
 80022a2:	f000 f917 	bl	80024d4 <__smakebuf_r>
 80022a6:	89a2      	ldrh	r2, [r4, #12]
 80022a8:	f012 0301 	ands.w	r3, r2, #1
 80022ac:	d00c      	beq.n	80022c8 <__swsetup_r+0xbc>
 80022ae:	2300      	movs	r3, #0
 80022b0:	60a3      	str	r3, [r4, #8]
 80022b2:	6963      	ldr	r3, [r4, #20]
 80022b4:	425b      	negs	r3, r3
 80022b6:	61a3      	str	r3, [r4, #24]
 80022b8:	6923      	ldr	r3, [r4, #16]
 80022ba:	b953      	cbnz	r3, 80022d2 <__swsetup_r+0xc6>
 80022bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80022c0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80022c4:	d1ba      	bne.n	800223c <__swsetup_r+0x30>
 80022c6:	bd70      	pop	{r4, r5, r6, pc}
 80022c8:	0792      	lsls	r2, r2, #30
 80022ca:	bf58      	it	pl
 80022cc:	6963      	ldrpl	r3, [r4, #20]
 80022ce:	60a3      	str	r3, [r4, #8]
 80022d0:	e7f2      	b.n	80022b8 <__swsetup_r+0xac>
 80022d2:	2000      	movs	r0, #0
 80022d4:	e7f7      	b.n	80022c6 <__swsetup_r+0xba>
 80022d6:	bf00      	nop
 80022d8:	2000000c 	.word	0x2000000c
 80022dc:	080026ec 	.word	0x080026ec
 80022e0:	0800270c 	.word	0x0800270c
 80022e4:	080026cc 	.word	0x080026cc

080022e8 <_close_r>:
 80022e8:	b538      	push	{r3, r4, r5, lr}
 80022ea:	2300      	movs	r3, #0
 80022ec:	4c05      	ldr	r4, [pc, #20]	; (8002304 <_close_r+0x1c>)
 80022ee:	4605      	mov	r5, r0
 80022f0:	4608      	mov	r0, r1
 80022f2:	6023      	str	r3, [r4, #0]
 80022f4:	f7ff f9e7 	bl	80016c6 <_close>
 80022f8:	1c43      	adds	r3, r0, #1
 80022fa:	d102      	bne.n	8002302 <_close_r+0x1a>
 80022fc:	6823      	ldr	r3, [r4, #0]
 80022fe:	b103      	cbz	r3, 8002302 <_close_r+0x1a>
 8002300:	602b      	str	r3, [r5, #0]
 8002302:	bd38      	pop	{r3, r4, r5, pc}
 8002304:	200000dc 	.word	0x200000dc

08002308 <__sflush_r>:
 8002308:	898a      	ldrh	r2, [r1, #12]
 800230a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800230e:	4605      	mov	r5, r0
 8002310:	0710      	lsls	r0, r2, #28
 8002312:	460c      	mov	r4, r1
 8002314:	d458      	bmi.n	80023c8 <__sflush_r+0xc0>
 8002316:	684b      	ldr	r3, [r1, #4]
 8002318:	2b00      	cmp	r3, #0
 800231a:	dc05      	bgt.n	8002328 <__sflush_r+0x20>
 800231c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800231e:	2b00      	cmp	r3, #0
 8002320:	dc02      	bgt.n	8002328 <__sflush_r+0x20>
 8002322:	2000      	movs	r0, #0
 8002324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002328:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800232a:	2e00      	cmp	r6, #0
 800232c:	d0f9      	beq.n	8002322 <__sflush_r+0x1a>
 800232e:	2300      	movs	r3, #0
 8002330:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002334:	682f      	ldr	r7, [r5, #0]
 8002336:	6a21      	ldr	r1, [r4, #32]
 8002338:	602b      	str	r3, [r5, #0]
 800233a:	d032      	beq.n	80023a2 <__sflush_r+0x9a>
 800233c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800233e:	89a3      	ldrh	r3, [r4, #12]
 8002340:	075a      	lsls	r2, r3, #29
 8002342:	d505      	bpl.n	8002350 <__sflush_r+0x48>
 8002344:	6863      	ldr	r3, [r4, #4]
 8002346:	1ac0      	subs	r0, r0, r3
 8002348:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800234a:	b10b      	cbz	r3, 8002350 <__sflush_r+0x48>
 800234c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800234e:	1ac0      	subs	r0, r0, r3
 8002350:	2300      	movs	r3, #0
 8002352:	4602      	mov	r2, r0
 8002354:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002356:	6a21      	ldr	r1, [r4, #32]
 8002358:	4628      	mov	r0, r5
 800235a:	47b0      	blx	r6
 800235c:	1c43      	adds	r3, r0, #1
 800235e:	89a3      	ldrh	r3, [r4, #12]
 8002360:	d106      	bne.n	8002370 <__sflush_r+0x68>
 8002362:	6829      	ldr	r1, [r5, #0]
 8002364:	291d      	cmp	r1, #29
 8002366:	d848      	bhi.n	80023fa <__sflush_r+0xf2>
 8002368:	4a29      	ldr	r2, [pc, #164]	; (8002410 <__sflush_r+0x108>)
 800236a:	40ca      	lsrs	r2, r1
 800236c:	07d6      	lsls	r6, r2, #31
 800236e:	d544      	bpl.n	80023fa <__sflush_r+0xf2>
 8002370:	2200      	movs	r2, #0
 8002372:	6062      	str	r2, [r4, #4]
 8002374:	6922      	ldr	r2, [r4, #16]
 8002376:	04d9      	lsls	r1, r3, #19
 8002378:	6022      	str	r2, [r4, #0]
 800237a:	d504      	bpl.n	8002386 <__sflush_r+0x7e>
 800237c:	1c42      	adds	r2, r0, #1
 800237e:	d101      	bne.n	8002384 <__sflush_r+0x7c>
 8002380:	682b      	ldr	r3, [r5, #0]
 8002382:	b903      	cbnz	r3, 8002386 <__sflush_r+0x7e>
 8002384:	6560      	str	r0, [r4, #84]	; 0x54
 8002386:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002388:	602f      	str	r7, [r5, #0]
 800238a:	2900      	cmp	r1, #0
 800238c:	d0c9      	beq.n	8002322 <__sflush_r+0x1a>
 800238e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002392:	4299      	cmp	r1, r3
 8002394:	d002      	beq.n	800239c <__sflush_r+0x94>
 8002396:	4628      	mov	r0, r5
 8002398:	f000 f8ec 	bl	8002574 <_free_r>
 800239c:	2000      	movs	r0, #0
 800239e:	6360      	str	r0, [r4, #52]	; 0x34
 80023a0:	e7c0      	b.n	8002324 <__sflush_r+0x1c>
 80023a2:	2301      	movs	r3, #1
 80023a4:	4628      	mov	r0, r5
 80023a6:	47b0      	blx	r6
 80023a8:	1c41      	adds	r1, r0, #1
 80023aa:	d1c8      	bne.n	800233e <__sflush_r+0x36>
 80023ac:	682b      	ldr	r3, [r5, #0]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d0c5      	beq.n	800233e <__sflush_r+0x36>
 80023b2:	2b1d      	cmp	r3, #29
 80023b4:	d001      	beq.n	80023ba <__sflush_r+0xb2>
 80023b6:	2b16      	cmp	r3, #22
 80023b8:	d101      	bne.n	80023be <__sflush_r+0xb6>
 80023ba:	602f      	str	r7, [r5, #0]
 80023bc:	e7b1      	b.n	8002322 <__sflush_r+0x1a>
 80023be:	89a3      	ldrh	r3, [r4, #12]
 80023c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023c4:	81a3      	strh	r3, [r4, #12]
 80023c6:	e7ad      	b.n	8002324 <__sflush_r+0x1c>
 80023c8:	690f      	ldr	r7, [r1, #16]
 80023ca:	2f00      	cmp	r7, #0
 80023cc:	d0a9      	beq.n	8002322 <__sflush_r+0x1a>
 80023ce:	0793      	lsls	r3, r2, #30
 80023d0:	bf18      	it	ne
 80023d2:	2300      	movne	r3, #0
 80023d4:	680e      	ldr	r6, [r1, #0]
 80023d6:	bf08      	it	eq
 80023d8:	694b      	ldreq	r3, [r1, #20]
 80023da:	eba6 0807 	sub.w	r8, r6, r7
 80023de:	600f      	str	r7, [r1, #0]
 80023e0:	608b      	str	r3, [r1, #8]
 80023e2:	f1b8 0f00 	cmp.w	r8, #0
 80023e6:	dd9c      	ble.n	8002322 <__sflush_r+0x1a>
 80023e8:	4643      	mov	r3, r8
 80023ea:	463a      	mov	r2, r7
 80023ec:	6a21      	ldr	r1, [r4, #32]
 80023ee:	4628      	mov	r0, r5
 80023f0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80023f2:	47b0      	blx	r6
 80023f4:	2800      	cmp	r0, #0
 80023f6:	dc06      	bgt.n	8002406 <__sflush_r+0xfe>
 80023f8:	89a3      	ldrh	r3, [r4, #12]
 80023fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023fe:	81a3      	strh	r3, [r4, #12]
 8002400:	f04f 30ff 	mov.w	r0, #4294967295
 8002404:	e78e      	b.n	8002324 <__sflush_r+0x1c>
 8002406:	4407      	add	r7, r0
 8002408:	eba8 0800 	sub.w	r8, r8, r0
 800240c:	e7e9      	b.n	80023e2 <__sflush_r+0xda>
 800240e:	bf00      	nop
 8002410:	20400001 	.word	0x20400001

08002414 <_fflush_r>:
 8002414:	b538      	push	{r3, r4, r5, lr}
 8002416:	690b      	ldr	r3, [r1, #16]
 8002418:	4605      	mov	r5, r0
 800241a:	460c      	mov	r4, r1
 800241c:	b1db      	cbz	r3, 8002456 <_fflush_r+0x42>
 800241e:	b118      	cbz	r0, 8002428 <_fflush_r+0x14>
 8002420:	6983      	ldr	r3, [r0, #24]
 8002422:	b90b      	cbnz	r3, 8002428 <_fflush_r+0x14>
 8002424:	f7ff fa90 	bl	8001948 <__sinit>
 8002428:	4b0c      	ldr	r3, [pc, #48]	; (800245c <_fflush_r+0x48>)
 800242a:	429c      	cmp	r4, r3
 800242c:	d109      	bne.n	8002442 <_fflush_r+0x2e>
 800242e:	686c      	ldr	r4, [r5, #4]
 8002430:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002434:	b17b      	cbz	r3, 8002456 <_fflush_r+0x42>
 8002436:	4621      	mov	r1, r4
 8002438:	4628      	mov	r0, r5
 800243a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800243e:	f7ff bf63 	b.w	8002308 <__sflush_r>
 8002442:	4b07      	ldr	r3, [pc, #28]	; (8002460 <_fflush_r+0x4c>)
 8002444:	429c      	cmp	r4, r3
 8002446:	d101      	bne.n	800244c <_fflush_r+0x38>
 8002448:	68ac      	ldr	r4, [r5, #8]
 800244a:	e7f1      	b.n	8002430 <_fflush_r+0x1c>
 800244c:	4b05      	ldr	r3, [pc, #20]	; (8002464 <_fflush_r+0x50>)
 800244e:	429c      	cmp	r4, r3
 8002450:	bf08      	it	eq
 8002452:	68ec      	ldreq	r4, [r5, #12]
 8002454:	e7ec      	b.n	8002430 <_fflush_r+0x1c>
 8002456:	2000      	movs	r0, #0
 8002458:	bd38      	pop	{r3, r4, r5, pc}
 800245a:	bf00      	nop
 800245c:	080026ec 	.word	0x080026ec
 8002460:	0800270c 	.word	0x0800270c
 8002464:	080026cc 	.word	0x080026cc

08002468 <_lseek_r>:
 8002468:	b538      	push	{r3, r4, r5, lr}
 800246a:	4605      	mov	r5, r0
 800246c:	4608      	mov	r0, r1
 800246e:	4611      	mov	r1, r2
 8002470:	2200      	movs	r2, #0
 8002472:	4c05      	ldr	r4, [pc, #20]	; (8002488 <_lseek_r+0x20>)
 8002474:	6022      	str	r2, [r4, #0]
 8002476:	461a      	mov	r2, r3
 8002478:	f7ff f949 	bl	800170e <_lseek>
 800247c:	1c43      	adds	r3, r0, #1
 800247e:	d102      	bne.n	8002486 <_lseek_r+0x1e>
 8002480:	6823      	ldr	r3, [r4, #0]
 8002482:	b103      	cbz	r3, 8002486 <_lseek_r+0x1e>
 8002484:	602b      	str	r3, [r5, #0]
 8002486:	bd38      	pop	{r3, r4, r5, pc}
 8002488:	200000dc 	.word	0x200000dc

0800248c <__swhatbuf_r>:
 800248c:	b570      	push	{r4, r5, r6, lr}
 800248e:	460e      	mov	r6, r1
 8002490:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002494:	b096      	sub	sp, #88	; 0x58
 8002496:	2900      	cmp	r1, #0
 8002498:	4614      	mov	r4, r2
 800249a:	461d      	mov	r5, r3
 800249c:	da07      	bge.n	80024ae <__swhatbuf_r+0x22>
 800249e:	2300      	movs	r3, #0
 80024a0:	602b      	str	r3, [r5, #0]
 80024a2:	89b3      	ldrh	r3, [r6, #12]
 80024a4:	061a      	lsls	r2, r3, #24
 80024a6:	d410      	bmi.n	80024ca <__swhatbuf_r+0x3e>
 80024a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024ac:	e00e      	b.n	80024cc <__swhatbuf_r+0x40>
 80024ae:	466a      	mov	r2, sp
 80024b0:	f000 f8be 	bl	8002630 <_fstat_r>
 80024b4:	2800      	cmp	r0, #0
 80024b6:	dbf2      	blt.n	800249e <__swhatbuf_r+0x12>
 80024b8:	9a01      	ldr	r2, [sp, #4]
 80024ba:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80024be:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80024c2:	425a      	negs	r2, r3
 80024c4:	415a      	adcs	r2, r3
 80024c6:	602a      	str	r2, [r5, #0]
 80024c8:	e7ee      	b.n	80024a8 <__swhatbuf_r+0x1c>
 80024ca:	2340      	movs	r3, #64	; 0x40
 80024cc:	2000      	movs	r0, #0
 80024ce:	6023      	str	r3, [r4, #0]
 80024d0:	b016      	add	sp, #88	; 0x58
 80024d2:	bd70      	pop	{r4, r5, r6, pc}

080024d4 <__smakebuf_r>:
 80024d4:	898b      	ldrh	r3, [r1, #12]
 80024d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80024d8:	079d      	lsls	r5, r3, #30
 80024da:	4606      	mov	r6, r0
 80024dc:	460c      	mov	r4, r1
 80024de:	d507      	bpl.n	80024f0 <__smakebuf_r+0x1c>
 80024e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80024e4:	6023      	str	r3, [r4, #0]
 80024e6:	6123      	str	r3, [r4, #16]
 80024e8:	2301      	movs	r3, #1
 80024ea:	6163      	str	r3, [r4, #20]
 80024ec:	b002      	add	sp, #8
 80024ee:	bd70      	pop	{r4, r5, r6, pc}
 80024f0:	ab01      	add	r3, sp, #4
 80024f2:	466a      	mov	r2, sp
 80024f4:	f7ff ffca 	bl	800248c <__swhatbuf_r>
 80024f8:	9900      	ldr	r1, [sp, #0]
 80024fa:	4605      	mov	r5, r0
 80024fc:	4630      	mov	r0, r6
 80024fe:	f7ff faad 	bl	8001a5c <_malloc_r>
 8002502:	b948      	cbnz	r0, 8002518 <__smakebuf_r+0x44>
 8002504:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002508:	059a      	lsls	r2, r3, #22
 800250a:	d4ef      	bmi.n	80024ec <__smakebuf_r+0x18>
 800250c:	f023 0303 	bic.w	r3, r3, #3
 8002510:	f043 0302 	orr.w	r3, r3, #2
 8002514:	81a3      	strh	r3, [r4, #12]
 8002516:	e7e3      	b.n	80024e0 <__smakebuf_r+0xc>
 8002518:	4b0d      	ldr	r3, [pc, #52]	; (8002550 <__smakebuf_r+0x7c>)
 800251a:	62b3      	str	r3, [r6, #40]	; 0x28
 800251c:	89a3      	ldrh	r3, [r4, #12]
 800251e:	6020      	str	r0, [r4, #0]
 8002520:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002524:	81a3      	strh	r3, [r4, #12]
 8002526:	9b00      	ldr	r3, [sp, #0]
 8002528:	6120      	str	r0, [r4, #16]
 800252a:	6163      	str	r3, [r4, #20]
 800252c:	9b01      	ldr	r3, [sp, #4]
 800252e:	b15b      	cbz	r3, 8002548 <__smakebuf_r+0x74>
 8002530:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002534:	4630      	mov	r0, r6
 8002536:	f000 f88d 	bl	8002654 <_isatty_r>
 800253a:	b128      	cbz	r0, 8002548 <__smakebuf_r+0x74>
 800253c:	89a3      	ldrh	r3, [r4, #12]
 800253e:	f023 0303 	bic.w	r3, r3, #3
 8002542:	f043 0301 	orr.w	r3, r3, #1
 8002546:	81a3      	strh	r3, [r4, #12]
 8002548:	89a3      	ldrh	r3, [r4, #12]
 800254a:	431d      	orrs	r5, r3
 800254c:	81a5      	strh	r5, [r4, #12]
 800254e:	e7cd      	b.n	80024ec <__smakebuf_r+0x18>
 8002550:	08001911 	.word	0x08001911

08002554 <memchr>:
 8002554:	b510      	push	{r4, lr}
 8002556:	b2c9      	uxtb	r1, r1
 8002558:	4402      	add	r2, r0
 800255a:	4290      	cmp	r0, r2
 800255c:	4603      	mov	r3, r0
 800255e:	d101      	bne.n	8002564 <memchr+0x10>
 8002560:	2300      	movs	r3, #0
 8002562:	e003      	b.n	800256c <memchr+0x18>
 8002564:	781c      	ldrb	r4, [r3, #0]
 8002566:	3001      	adds	r0, #1
 8002568:	428c      	cmp	r4, r1
 800256a:	d1f6      	bne.n	800255a <memchr+0x6>
 800256c:	4618      	mov	r0, r3
 800256e:	bd10      	pop	{r4, pc}

08002570 <__malloc_lock>:
 8002570:	4770      	bx	lr

08002572 <__malloc_unlock>:
 8002572:	4770      	bx	lr

08002574 <_free_r>:
 8002574:	b538      	push	{r3, r4, r5, lr}
 8002576:	4605      	mov	r5, r0
 8002578:	2900      	cmp	r1, #0
 800257a:	d043      	beq.n	8002604 <_free_r+0x90>
 800257c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002580:	1f0c      	subs	r4, r1, #4
 8002582:	2b00      	cmp	r3, #0
 8002584:	bfb8      	it	lt
 8002586:	18e4      	addlt	r4, r4, r3
 8002588:	f7ff fff2 	bl	8002570 <__malloc_lock>
 800258c:	4a1e      	ldr	r2, [pc, #120]	; (8002608 <_free_r+0x94>)
 800258e:	6813      	ldr	r3, [r2, #0]
 8002590:	4610      	mov	r0, r2
 8002592:	b933      	cbnz	r3, 80025a2 <_free_r+0x2e>
 8002594:	6063      	str	r3, [r4, #4]
 8002596:	6014      	str	r4, [r2, #0]
 8002598:	4628      	mov	r0, r5
 800259a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800259e:	f7ff bfe8 	b.w	8002572 <__malloc_unlock>
 80025a2:	42a3      	cmp	r3, r4
 80025a4:	d90b      	bls.n	80025be <_free_r+0x4a>
 80025a6:	6821      	ldr	r1, [r4, #0]
 80025a8:	1862      	adds	r2, r4, r1
 80025aa:	4293      	cmp	r3, r2
 80025ac:	bf01      	itttt	eq
 80025ae:	681a      	ldreq	r2, [r3, #0]
 80025b0:	685b      	ldreq	r3, [r3, #4]
 80025b2:	1852      	addeq	r2, r2, r1
 80025b4:	6022      	streq	r2, [r4, #0]
 80025b6:	6063      	str	r3, [r4, #4]
 80025b8:	6004      	str	r4, [r0, #0]
 80025ba:	e7ed      	b.n	8002598 <_free_r+0x24>
 80025bc:	4613      	mov	r3, r2
 80025be:	685a      	ldr	r2, [r3, #4]
 80025c0:	b10a      	cbz	r2, 80025c6 <_free_r+0x52>
 80025c2:	42a2      	cmp	r2, r4
 80025c4:	d9fa      	bls.n	80025bc <_free_r+0x48>
 80025c6:	6819      	ldr	r1, [r3, #0]
 80025c8:	1858      	adds	r0, r3, r1
 80025ca:	42a0      	cmp	r0, r4
 80025cc:	d10b      	bne.n	80025e6 <_free_r+0x72>
 80025ce:	6820      	ldr	r0, [r4, #0]
 80025d0:	4401      	add	r1, r0
 80025d2:	1858      	adds	r0, r3, r1
 80025d4:	4282      	cmp	r2, r0
 80025d6:	6019      	str	r1, [r3, #0]
 80025d8:	d1de      	bne.n	8002598 <_free_r+0x24>
 80025da:	6810      	ldr	r0, [r2, #0]
 80025dc:	6852      	ldr	r2, [r2, #4]
 80025de:	4401      	add	r1, r0
 80025e0:	6019      	str	r1, [r3, #0]
 80025e2:	605a      	str	r2, [r3, #4]
 80025e4:	e7d8      	b.n	8002598 <_free_r+0x24>
 80025e6:	d902      	bls.n	80025ee <_free_r+0x7a>
 80025e8:	230c      	movs	r3, #12
 80025ea:	602b      	str	r3, [r5, #0]
 80025ec:	e7d4      	b.n	8002598 <_free_r+0x24>
 80025ee:	6820      	ldr	r0, [r4, #0]
 80025f0:	1821      	adds	r1, r4, r0
 80025f2:	428a      	cmp	r2, r1
 80025f4:	bf01      	itttt	eq
 80025f6:	6811      	ldreq	r1, [r2, #0]
 80025f8:	6852      	ldreq	r2, [r2, #4]
 80025fa:	1809      	addeq	r1, r1, r0
 80025fc:	6021      	streq	r1, [r4, #0]
 80025fe:	6062      	str	r2, [r4, #4]
 8002600:	605c      	str	r4, [r3, #4]
 8002602:	e7c9      	b.n	8002598 <_free_r+0x24>
 8002604:	bd38      	pop	{r3, r4, r5, pc}
 8002606:	bf00      	nop
 8002608:	20000090 	.word	0x20000090

0800260c <_read_r>:
 800260c:	b538      	push	{r3, r4, r5, lr}
 800260e:	4605      	mov	r5, r0
 8002610:	4608      	mov	r0, r1
 8002612:	4611      	mov	r1, r2
 8002614:	2200      	movs	r2, #0
 8002616:	4c05      	ldr	r4, [pc, #20]	; (800262c <_read_r+0x20>)
 8002618:	6022      	str	r2, [r4, #0]
 800261a:	461a      	mov	r2, r3
 800261c:	f7ff f81a 	bl	8001654 <_read>
 8002620:	1c43      	adds	r3, r0, #1
 8002622:	d102      	bne.n	800262a <_read_r+0x1e>
 8002624:	6823      	ldr	r3, [r4, #0]
 8002626:	b103      	cbz	r3, 800262a <_read_r+0x1e>
 8002628:	602b      	str	r3, [r5, #0]
 800262a:	bd38      	pop	{r3, r4, r5, pc}
 800262c:	200000dc 	.word	0x200000dc

08002630 <_fstat_r>:
 8002630:	b538      	push	{r3, r4, r5, lr}
 8002632:	2300      	movs	r3, #0
 8002634:	4c06      	ldr	r4, [pc, #24]	; (8002650 <_fstat_r+0x20>)
 8002636:	4605      	mov	r5, r0
 8002638:	4608      	mov	r0, r1
 800263a:	4611      	mov	r1, r2
 800263c:	6023      	str	r3, [r4, #0]
 800263e:	f7ff f84d 	bl	80016dc <_fstat>
 8002642:	1c43      	adds	r3, r0, #1
 8002644:	d102      	bne.n	800264c <_fstat_r+0x1c>
 8002646:	6823      	ldr	r3, [r4, #0]
 8002648:	b103      	cbz	r3, 800264c <_fstat_r+0x1c>
 800264a:	602b      	str	r3, [r5, #0]
 800264c:	bd38      	pop	{r3, r4, r5, pc}
 800264e:	bf00      	nop
 8002650:	200000dc 	.word	0x200000dc

08002654 <_isatty_r>:
 8002654:	b538      	push	{r3, r4, r5, lr}
 8002656:	2300      	movs	r3, #0
 8002658:	4c05      	ldr	r4, [pc, #20]	; (8002670 <_isatty_r+0x1c>)
 800265a:	4605      	mov	r5, r0
 800265c:	4608      	mov	r0, r1
 800265e:	6023      	str	r3, [r4, #0]
 8002660:	f7ff f84b 	bl	80016fa <_isatty>
 8002664:	1c43      	adds	r3, r0, #1
 8002666:	d102      	bne.n	800266e <_isatty_r+0x1a>
 8002668:	6823      	ldr	r3, [r4, #0]
 800266a:	b103      	cbz	r3, 800266e <_isatty_r+0x1a>
 800266c:	602b      	str	r3, [r5, #0]
 800266e:	bd38      	pop	{r3, r4, r5, pc}
 8002670:	200000dc 	.word	0x200000dc

08002674 <_init>:
 8002674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002676:	bf00      	nop
 8002678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800267a:	bc08      	pop	{r3}
 800267c:	469e      	mov	lr, r3
 800267e:	4770      	bx	lr

08002680 <_fini>:
 8002680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002682:	bf00      	nop
 8002684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002686:	bc08      	pop	{r3}
 8002688:	469e      	mov	lr, r3
 800268a:	4770      	bx	lr
